{"version":3,"sources":["components/Button/Button.module.scss","components/InputText/InputText.module.scss","components/InputText/InputText.tsx","components/Button/Button.tsx","features/Profile/Profile.tsx","features/Login/Login.tsx","features/SignUp/SignUp.tsx","features/Recovery/Recovery.tsx","features/Initiate/Initiate.tsx","components/Header/Header.tsx","app/App.tsx","serviceWorker.ts","index.tsx","components/Header/Header.module.scss"],"names":["module","exports","InputText","props","className","s","inputText","error","value","type","onChange","e","inputValue","currentTarget","onKeyPress","key","actionEnter","Button","mode","btn","onClick","action","Profile","useState","setInputValue","alert","Login","to","activeClassName","SignUp","Recovery","Initiate","Header","header","navList","navLink","linkItem","App","exact","path","render","from","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fe9e9a9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1nhA4\",\"error\":\"Button_error__3zTj0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputText\":\"InputText_inputText__1ZhLQ\",\"error\":\"InputText_error__f2mwi\"};","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport s from \"./InputText.module.scss\"\n\ntype InputTextTypeProps = {\n    value: string\n    onChange: (inputValue: string) => void\n    actionEnter: () => void;\n    error?: boolean\n}\n\n\nexport const InputText = (props: InputTextTypeProps) => {\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        let inputValue = e.currentTarget.value;\n        props.onChange(inputValue);\n    }\n\n    const actionEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            props.actionEnter();\n        }\n\n    }\n    return (\n        <>\n            <input className={`${s.inputText} ${props.error && props.value !==\"\" ? s.error : \"\"}`}\n                   type=\"text\"\n                   value={props.value}\n                   onChange={onChange}\n                   onKeyPress={actionEnter}\n\n            />\n            <span>{}</span>\n        </>\n    );\n}","import React, {useState} from \"react\";\nimport s from \"./Button.module.scss\"\n\ntype ButtonTypeProps = {\n    value:string\n    action: ()=> void\n    mode?: \"red\"\n}\n\nexport const Button = (props:ButtonTypeProps) =>{\n\n    return(\n        <button\n            className={props.mode === \"red\" ? `${s.btn}  ${s.error}`:  s.btn}\n            onClick={props.action}>\n            {props.value}\n        </button>\n    );\n}","import React, {useState} from \"react\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\n\n\nexport const Profile = () =>{\n    let [inputValue, setInputValue] = useState<string>(\"\");\n    return(\n\n        <>\n            <h1>Profile Page</h1>\n            <InputText value={inputValue} onChange={setInputValue} actionEnter={()=>{alert(\"enter\")}}/>\n            <Button value={\"click\"} action={()=>{alert(\"click\")}}/>\n        </>\n    );\n}","import React from \"react\";\nimport s from \"../../components/Header/Header.module.scss\";\nimport {NavLink} from \"react-router-dom\";\n\n\nexport const Login = () =>{\n    return(\n        <>\n            <h1>Login Page</h1>\n            <NavLink className={\"\"} to=\"recovery\" activeClassName={\"\"}>\n                <span className={\"\"}> Forget Password?</span>\n            </NavLink>\n        </>\n    );\n}","import React from \"react\";\n\n\nexport const SignUp = () =>{\n    return(\n        <>\n            <h1>SignUp Page</h1>\n        </>\n    );\n}","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\n\nexport const Recovery = () =>{\n    return(\n        <>\n            <h1>Recovery Page</h1>\n            <NavLink className={\"\"} to=\"initiate\" activeClassName={\"\"}>\n                <span className={\"\"}>Recovery Password</span>\n            </NavLink>\n        </>\n    );\n}","import React from \"react\";\n\n\nexport const Initiate = () =>{\n    return(\n        <>\n            <h1>Initiate Page</h1>\n        </>\n    );\n}","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport s from \"./Header.module.scss\"\n\nexport const Header = () => {\n    return(\n        <>\n        <header className={s.header}>\n            <nav>\n                <ul className={s.navList}>\n                    <NavLink className={s.navLink} to=\"/\" activeClassName={\"\"}>\n                        <li className={s.linkItem}> Profile</li>\n                    </NavLink>\n\n                    <NavLink className={s.navLink} to=\"login\" activeClassName={\"\"}>\n                        <li className={s.linkItem}> Login</li>\n                    </NavLink>\n                    <NavLink className={s.navLink} to=\"signup\" activeClassName={\"\"}>\n                        <li className={s.linkItem}> Signup</li>\n                    </NavLink>\n\n                </ul>\n            </nav>\n        </header>\n        </>);\n}","import React from 'react';\nimport './App.scss';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport {Profile} from \"../features/Profile/Profile\";\nimport {Login} from \"../features/Login/Login\";\nimport {SignUp} from \"../features/SignUp/SignUp\";\nimport {Recovery} from \"../features/Recovery/Recovery\";\nimport {Initiate} from \"../features/Initiate/Initiate\";\nimport {Header} from \"../components/Header/Header\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Switch>\n                <Route exact path={\"/\"} render={() => <Profile/>}/>\n                <Route path={'/login'} render={() => <Login/>}/>\n                <Route path={'/signup'} render={() => <SignUp/>}/>\n                <Route path={'/recovery'} render={() => <Recovery/>}/>\n                <Route path={'/initiate'} render={() => <Initiate/>}/>\n                <Route path={\"/404\"} render={() => <h1>Error 404. Page not found.</h1>}/>\n                <Redirect from={\"*\"} to={\"/404\"}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter><React.StrictMode>\n        <App/>\n    </React.StrictMode></BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__MvSEZ\",\"navList\":\"Header_navList__SRaEo\",\"navLink\":\"Header_navLink__2CSW2\",\"linkItem\":\"Header_linkItem__1zaZK\"};"],"sourceRoot":""}