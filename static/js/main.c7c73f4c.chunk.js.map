{"version":3,"sources":["app/App.module.scss","components/Header/Header.module.scss","features/SignUp/SignUp.module.scss","components/Button/Button.module.scss","components/InputCheckbox/InputCheckbox.module.scss","components/InputText/InputText.module.scss","features/Login/Login.module.scss","components/Preloader/Preloader.module.scss","assets/img/loader.gif","components/InputText/InputText.tsx","components/Button/Button.tsx","features/Profile/Profile.tsx","api/api.ts","features/Login/auth-reducer.ts","components/Preloader/Preloader.tsx","components/InputCheckbox/InputCheckbox.tsx","features/Login/Login.tsx","features/SignUp/signup-reducer.ts","features/SignUp/SignUp.tsx","features/Recovery/recovery-reducer.ts","utils/customHooks.ts","features/Recovery/Recovery.tsx","features/Initiate/Initiate.tsx","components/Header/Header.tsx","app/app-reducer.ts","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["module","exports","InputText","props","className","s","inputText","error","value","type","onChange","onKeyPress","e","key","actionEnter","name","placeholder","Button","mode","btn","onClick","action","disabled","Profile","useSelector","state","login","isLoggedIn","alert","to","instance","axios","create","baseURL","withCredentials","authAPI","email","post","password","resetPasswordToken","data","delete","initialState","status","setIsLoggedAC","setLoginErrorAC","setStatusAC","Preloader","wrapper","src","preloader","alt","InputCheckBox","checkbox","checked","active","input","changeStatus","Login","dispatch","useDispatch","isLogged","errorLogin","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","catch","response","setTimeout","finally","formWrapper","handleSubmit","handleChange","style","color","styles","activeClassName","isRegistered","registrationLoad","registrationError","setRegistrationLoadAC","loading","setRegistrationErrorAC","SignUp","signup","getFieldProps","linkToLogin","isShipment","isShowPreloader","setIsShipment","shipment","showError","setIsShowPreloader","useRedirect","useState","redirect","makeRedirect","useEffect","timeoutId","clearTimeout","Recovery","networkErrorMessage","recovery","a","resetForm","Initiate","token","useParams","passwordRepeat","newPassword","resetPasswordTC","Header","header","navList","navLink","linkItem","isInitialized","setStatusAppAC","App","app","err","exact","path","render","from","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.c7c73f4c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3Uewk\",\"container\":\"App_container__lEsUy\",\"formWrapper\":\"App_formWrapper__2fr31\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__MvSEZ\",\"navList\":\"Header_navList__SRaEo\",\"navLink\":\"Header_navLink__2CSW2\",\"linkItem\":\"Header_linkItem__1zaZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"SignUp_error__1MTeK\",\"linkToLogin\":\"SignUp_linkToLogin__3V_xG\",\"registrationError\":\"SignUp_registrationError__3WYgz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1nhA4\",\"error\":\"Button_error__3zTj0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputCheckbox_input__2BraD\",\"checkbox\":\"InputCheckbox_checkbox__3Fr75\",\"active\":\"InputCheckbox_active__2rIEX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputText\":\"InputText_inputText__1ZhLQ\",\"error\":\"InputText_error__f2mwi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorLogin\":\"Login_errorLogin__2xNUa\",\"loginFormWrapper\":\"Login_loginFormWrapper__1uesW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__1ACTc\"};","module.exports = __webpack_public_path__ + \"static/media/loader.e46d3467.gif\";","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport s from \"./InputText.module.scss\"\n\ntype InputTextTypeProps = {\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\n    actionEnter?: () => void;\n    error?: boolean\n    name?:string\n    placeholder?:string\n    type:string\n\n}\n\nexport const InputText = (props: InputTextTypeProps) => {\n\n    const actionEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter' && props.actionEnter) {\n            props.actionEnter();\n        }\n\n    }\n    return (\n        <>\n            <input className={`${s.inputText} ${props.error && props.value !==\"\" ? s.error : \"\"}`}\n                   type={props.type}\n                   value={props.value}\n                   onChange={props.onChange}\n                   onKeyPress={actionEnter}\n                   name={props.name}\n                   placeholder={props.placeholder}\n            />\n        </>\n    );\n}","import React, {useState} from \"react\";\nimport s from \"./Button.module.scss\"\n\ntype ButtonTypeProps = {\n    value:string\n    action: ()=> void\n    mode?: \"red\"|null\n    type?:\"button\" | \"submit\" | \"reset\" | undefined\n    disabled?:boolean\n}\n\nexport const Button = (props:ButtonTypeProps) =>{\n    return(\n        <button\n            className={props.mode === \"red\" ? `${s.btn}  ${s.error}`:  s.btn}\n            onClick={props.action}\n            type={props.type}\n            disabled={props.disabled}\n        >\n            {props.value}\n        </button>\n    );\n}","import React, {useEffect} from \"react\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\n\nexport const Profile = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n\n    if (!isLoggedIn) {\n        debugger\n       return <Redirect to={'/login'}/>\n    }\n    return (\n        <>\n            <h1>Profile Page</h1>\n            <InputText value={\"\"} onChange={() => {\n            }} actionEnter={() => {\n                alert(\"enter\")\n            }} type={\"text\"}/>\n            <Button value={\"click\"} action={() => {\n                alert(\"click\")\n            }}/>\n        </>\n    );\n}\n\n","import axios from \"axios\";\nimport {LoginParamsType} from \"../features/Login/auth-reducer\";\n\nconst settings = {\n    withCredentials: true\n}\n\n\nconst instance = axios.create({\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\n    ...settings\n})\n\nexport const authAPI = {\n    forgotPassword(email: string) {\n        return instance.post(\"/auth/forgot\", {\n            email,\n            \"from\": \"test-front-admin <ai73a@yandex.by>\",\n            \"message\": \"<div style= 'background-color: #b8b8b8; padding: 15px'> \" +\n                \"password recovery link: <a href='http://localhost:3000/Fridayapp#/initiate/$token$'> \" +\n                \"Click the link to restore access to your account \" +\n                \"</a>\" +\n                \"</div>\"\n        })\n    },\n    setNewPassword(password:string,resetPasswordToken:string) {\n        return instance.post(\"/auth/set-new-password\",{password,resetPasswordToken})\n    },\n    login(data: LoginParamsType) {\n        return instance.post(`/auth/login`, data)\n    },\n    logout() {\n        return instance.delete(\"/auth/me\")\n    },\n    registered(data: RegisteredParamsType) {\n        return  instance.post<RegistrationResponseType>('/auth/register', data)\n    },\n    me() {\n        return instance.post('auth/me')\n    }\n}\n\n//nya-admin@nya.nya\n//1qazxcvBG\n\n\n//types\nexport type RegisteredParamsType = {\n    email: string,\n    password: string\n}\nexport type RegistrationResponseType = {\n    addedUser: {\n        created: string\n        email: string\n        isAdmin: boolean\n        name: string\n        publicCardPacksCount: number\n        rememberMe: boolean\n        updated: string\n        verified: boolean\n        __v: number\n        _id: string\n    }\n}","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Dispatch} from \"redux\";\nimport {authAPI} from \"../../api/api\";\n\n\nconst initialState = {\n    isLoggedIn: false,\n    error: '',\n    status: 'idle' as RequestStatusType\n}\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case \"SET_IS_LOGGED\":\n            return {...state, isLoggedIn: action.value}\n        case \"SET_LOGIN_ERROR\":\n            return {...state, error: action.error}\n        case \"SET_STATUS\":\n            return {...state, status: action.status}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsLoggedAC = (value: boolean) =>\n    ({type: \"SET_IS_LOGGED\", value} as const)\n\nexport const setLoginErrorAC = (error: string) =>\n    ({type: \"SET_LOGIN_ERROR\", error} as const)\n\nexport const setStatusAC = (status: RequestStatusType) =>\n    ({type: \"SET_STATUS\", status} as const)\n\n//Thunk creators\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setStatusAC('loading'))\n    authAPI.login(data)\n        .then((res) => {\n            debugger\n            if (res.status === 200) {\n                dispatch(setIsLoggedAC(true))\n            }\n        })\n        .catch((e) => {\n            const error = e.response.data.error\n            dispatch(setLoginErrorAC(error))\n            setTimeout(() => dispatch(setLoginErrorAC(\"\")), 5000);\n\n        })\n        .finally(() => {\n                dispatch(setStatusAC('succeeded'))\n            }\n        )\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setStatusAC('loading'))\n    authAPI.logout()\n        .then((res) => {\n            if (res.status === 200) {\n                dispatch(setIsLoggedAC(false))\n            }\n        })\n        .finally(() => {\n            dispatch(setStatusAC('succeeded'))\n        })\n}\n\n//types\ntype InitialStateType = typeof initialState;\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\n// type ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\nexport type SetIsLoggedType = ReturnType<typeof setIsLoggedAC>\ntype ActionsTypes =\n    SetIsLoggedType |\n    ReturnType<typeof setLoginErrorAC> |\n    ReturnType<typeof setStatusAC>\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}","import React from \"react\";\nimport s from \"./Preloader.module.scss\"\nimport preloader from \"../../assets/img/loader.gif\"\n\nexport const Preloader = () => {\n    return(\n        <div className={s.wrapper}>\n            <img src={preloader} alt=\"loading...\"/>\n        </div>\n    );\n}","import React, {ChangeEvent} from \"react\";\nimport s from \"./InputCheckbox.module.scss\"\n\ntype inputCheckboxTypeProps = {\n    checked: boolean\n    changeStatus: (e: ChangeEvent<HTMLInputElement>) => void\n    value: string;\n    id?: number\n    name?:string\n}\n\nexport const InputCheckBox = (props: inputCheckboxTypeProps) => {\n\n    // const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n    //     let id = props.id || +e.currentTarget.id;\n    //     props.changeStatus(e.currentTarget.checked, id);\n    // }\n    return (\n        <>\n            <label className={`${s.checkbox} ${props.checked ? s.active : \"\"}`}>\n                <input className={s.input} type=\"checkbox\"  checked={props.checked} onChange={props.changeStatus} name={\"rememberMe\"}/>\n                <span>{props.value}</span>\n            </label>\n        </>\n    );\n}","import React from \"react\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {useFormik} from \"formik\";\nimport {loginTC, RequestStatusType} from \"./auth-reducer\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport styles from \"./Login.module.scss\"\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {InputCheckBox} from \"../../components/InputCheckbox/InputCheckbox\";\nimport s from \"../../app/App.module.scss\"\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const errorLogin = useSelector<AppRootStateType, string>(state => state.login.error)\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.login.status)\n\n    type FormikErrorType = {\n        email?: string\n        password?: string\n        rememberMe?: boolean\n    }\n\n    const formik = useFormik({\n\n        initialValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n        },\n        validate: values => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 6) {\n                errors.password = 'Must be 6 characters or less';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        }\n    })\n\n    if (isLogged) {\n        return <Redirect to={\"/\"}/>\n    }\n\n    return (\n        <div className={s.formWrapper}>\n            <h1>Login Page</h1>\n            <form onSubmit={formik.handleSubmit} >\n                <InputText name={\"email\"} value={formik.values.email}\n                           onChange={formik.handleChange}\n                           placeholder={\"Email\"}\n                           actionEnter={() => {\n                           }} type={\"text\"}/>\n                {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                <InputText name={\"password\"} value={formik.values.password}\n                           onChange={formik.handleChange}\n                           placeholder={\"Password\"}\n                           actionEnter={() => {\n                           }} type={\"password\"}/>\n                {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                {errorLogin && <div className={styles.errorLogin}>{errorLogin}</div>}\n                {status === 'loading' && <Preloader/>}\n                <InputCheckBox checked={formik.values.rememberMe} changeStatus={formik.handleChange}\n                               value={\"remember me\"} name={\"rememberMe\"}/><br/>\n                <Button value={\"send\"} action={formik.handleSubmit} type={\"submit\"}/>\n\n            </form>\n            <NavLink className={\"\"} to=\"recovery\" activeClassName={\"\"}>\n                <span className={\"\"}> Forgot password?</span>\n            </NavLink>\n        </div>\n    );\n}","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {authAPI, RegisteredParamsType} from \"../../api/api\";\nimport {setLoginErrorAC} from \"../Login/auth-reducer\";\n\n\nconst initialState: InitialStateType = {\n    isRegistered: false,\n    registrationLoad: false,\n    registrationError: null\n}\n\nexport const signUpReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SET-IS-REGISTERED':\n            return {...state, isRegistered: action.isRegistered}\n        case \"SET-LOADING-REGISTER\":\n            return {...state, registrationLoad: action.loading}\n        case \"SET-REGISTRATION-ERROR\":\n            return {...state, registrationError: action.error}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsRegisteredAC = (isRegistered: boolean) => ({type: 'SET-IS-REGISTERED', isRegistered} as const)\nexport const setRegistrationLoadAC = (loading: boolean) => ({type: 'SET-LOADING-REGISTER', loading} as const)\nexport const setRegistrationErrorAC = (error: null | string) => ({type: 'SET-REGISTRATION-ERROR', error} as const)\n\n\n//Thunk creators\nexport const registrationTC = (data: RegisteredParamsType) => {\n    return  (dispatch: any) => {\n        dispatch(setRegistrationLoadAC(true))\n        authAPI.registered(data)\n            .then( (res) => {\n                dispatch(setIsRegisteredAC(true))\n            })\n            .catch( (error) => {\n                dispatch(setRegistrationErrorAC(error.response.data.error))\n                setTimeout(() => dispatch(setRegistrationErrorAC(\"\")), 5000);\n            })\n            .finally( () => {\n                dispatch(setRegistrationLoadAC(false))\n            })\n    }\n}\n\n//types\ntype ActionsTypes =\n    | ReturnType<typeof setIsRegisteredAC>\n    | ReturnType<typeof setRegistrationLoadAC>\n    | ReturnType<typeof setRegistrationErrorAC>\n\n\ntype ThunksDispatch = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype InitialStateType = {\n    isRegistered: boolean\n    registrationLoad: boolean\n    registrationError: null | string\n};\n\n\n\n\n\n\n\n","import React from \"react\";\nimport styles from \"./SignUp.module.scss\"\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {useFormik} from \"formik\";\nimport {Button} from \"../../components/Button/Button\";\nimport {registrationTC} from \"./signup-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {AppRootStateType} from \"../../app/store\";\nimport { Preloader } from \"../../components/Preloader/Preloader\";\nimport s from \"../../app/App.module.scss\";\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n}\n\nexport const SignUp = () => {\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.signup.isRegistered)\n    const registrationLoad = useSelector<AppRootStateType, boolean>(state => state.signup.registrationLoad)\n    const registrationError = useSelector<AppRootStateType, null | string>(state => state.signup.registrationError)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n        },\n        onSubmit: values => {\n            dispatch(registrationTC(values))\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 7) {\n                errors.password = 'Password must be at least 7 characters';\n            }\n            return errors;\n        },\n    })\n\n    if (isRegistered) {\n        return <Redirect to={'/login'}/>\n    }\n    if (registrationLoad) {\n        return <Preloader/>\n    }\ndebugger\n    return (\n        <div className={s.formWrapper}>\n            <h2>Registration</h2>\n            <form>\n                <InputText placeholder={'email'}\n                           type={'text'}\n                           {...formik.getFieldProps('email')}\n                />\n                {formik.errors.email && <div className={styles.error}>{formik.errors.email}</div>}\n                <InputText placeholder={'password'}\n                           type='password'\n                           {...formik.getFieldProps('password')}\n                />\n                {formik.errors.password && <div className={styles.error}>{formik.errors.password}</div>}\n                <Button disabled={false} type='submit' value='register' action={formik.handleSubmit}/>\n            </form>\n            <div className={styles.linkToLogin}>\n                <NavLink to='login'>\n                    <span>Login</span>\n                </NavLink>\n            </div>\n            {registrationError && <div className={styles.registrationError}>{registrationError}</div>}\n        </div>\n    );\n}","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {authAPI} from \"../../api/api\";\n\nconst RECOVERY_SET_SHIPMENT = \"RECOVERY_SET_SHIPMENT\";\nconst RECOVERY_SHOW_ERROR = \"RECOVERY_SHOW_ERROR\";\nconst RECOVERY_SET_STATUS = \"RECOVERY_SET_STATUS\";\n\n\nconst initialState: InitialRecoveryStateType = {\n    error: \"\",\n    isShipment: false,\n    isShowPreloader: false\n}\n\nexport const recoveryReducer = (state: InitialRecoveryStateType = initialState, action: ActionsTypes): InitialRecoveryStateType => {\n    switch (action.type) {\n        case RECOVERY_SET_SHIPMENT:\n            return {\n                ...state, isShipment: action.shipment\n            }\n        case RECOVERY_SHOW_ERROR:\n            return {\n                ...state, error: action.error\n            }\n        case RECOVERY_SET_STATUS:\n            return {\n                ...state, isShowPreloader: action.status\n            }\n        default:\n            return {...state}\n    }\n}\n\n//Action creators\nconst setIsShipment = (shipment: boolean) => ({type: RECOVERY_SET_SHIPMENT, shipment} as const);\nconst showError = (error: string) => ({type: RECOVERY_SHOW_ERROR, error} as const);\nconst setIsShowPreloader = (status: boolean) => ({type: RECOVERY_SET_STATUS, status} as const);\n\n//Thunk creators\nexport const recoveryRequestTC = (email: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(setIsShowPreloader(true))\n        try {\n            await authAPI.forgotPassword(email);\n            dispatch(setIsShipment(true));\n            dispatch(setIsShowPreloader(false));\n        } catch (error) {\n            dispatch(showError(error.response.data.error));\n            dispatch(setIsShowPreloader(false))\n        }\n    }\n}\n\nexport const resetPasswordTC = (newPassword: string, token: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(setIsShowPreloader(true))\n        try {\n            await authAPI.setNewPassword(newPassword, token);\n            dispatch(setIsShipment(true))\n            dispatch(setIsShowPreloader(false))\n        } catch (error) {\n            dispatch(showError(error.response.data.error));\n            setTimeout(() => dispatch(showError(\"\")), 5000);\n        }\n    }\n}\n\n//types\nexport type InitialRecoveryStateType = {\n    error: string\n    isShipment: boolean\n    isShowPreloader: boolean\n};\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\ntype ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\n\ntype ActionsTypes =\n    | ReturnType<typeof setIsShipment>\n    | ReturnType<typeof showError>\n    | ReturnType<typeof setIsShowPreloader>","import {useEffect, useState} from \"react\";\n\n\nexport const useRedirect = (shipment: boolean) => {\n    const [redirect, makeRedirect] = useState(false);\n    useEffect(() => {\n        const timeoutId = setTimeout(() => {\n            if (!shipment) return;\n            makeRedirect(true);\n        }, 5000);\n        return () => clearTimeout(timeoutId);\n    }, [shipment]);\n    return redirect;\n}","import React from \"react\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {recoveryRequestTC} from \"./recovery-reducer\";\nimport {Redirect} from 'react-router-dom';\nimport {AppRootStateType} from \"../../app/store\";\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {useRedirect} from \"../../utils/customHooks\";\nimport s from \"../../app/App.module.scss\";\n\n\nexport const Recovery = () => {\n    const networkErrorMessage = useSelector<AppRootStateType, string>(state => state.recovery.error);\n    const status = useSelector<AppRootStateType, boolean>(state => state.recovery.isShowPreloader);\n    const shipment = useSelector<AppRootStateType, boolean>(state => state.recovery.isShipment);\n    const redirect = useRedirect(shipment);\n\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n        },\n        onSubmit: values => {\n            dispatch(recoveryRequestTC(values.email))\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n    })\n\n    if (redirect) {\n        return <Redirect to={\"/login\"}/>\n    }\n    if (shipment) {\n        return <div>Instructions for password recovery have been sent to your email address.</div>\n\n    }\n\n    return (\n        <div className={s.formWrapper}>\n            {status ? <Preloader/> : \"\"}\n            <h2>Forgot password?</h2>\n            <p>Please enter your email address.</p>\n            <form onSubmit={formik.handleSubmit}>\n                <InputText name={\"email\"} value={formik.values.email} onChange={formik.handleChange}\n                           actionEnter={() => {\n                           }} type={\"text\"}/>\n                {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                <p style={{color: \"red\"}}>{networkErrorMessage}</p>\n                <Button value={\"send\"} action={formik.handleSubmit} type={\"submit\"} disabled={status}\n                        mode={status ? \"red\" : null}/>\n            </form>\n        </div>\n    );\n}\n\nexport type FormikErrorType = {\n    email?: string\n}\n","import React from \"react\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport {useFormik} from \"formik\";\nimport {Redirect, useParams} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {resetPasswordTC} from \"../Recovery/recovery-reducer\";\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {useRedirect} from \"../../utils/customHooks\";\nimport s from \"../../app/App.module.scss\";\n\n\nexport const Initiate = () => {\n\n    const status = useSelector<AppRootStateType, boolean>(state => state.recovery.isShowPreloader);\n    const shipment = useSelector<AppRootStateType, boolean>(state => state.recovery.isShipment);\n    const redirect = useRedirect(shipment);\n    const networkErrorMessage = useSelector<AppRootStateType, string>(state => state.recovery.error);\n    const dispatch = useDispatch();\n    const {token} = useParams();\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            passwordRepeat: ''\n        },\n        onSubmit: values => {\n            dispatch(resetPasswordTC(values.passwordRepeat, token))\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 2) {\n                errors.password = 'Too Short!';\n            } else if (values.password.length > 10) {\n                errors.password = 'Max 10 chars';\n            } else if (values.password !== values.passwordRepeat) {\n                errors.password = \"The entered values do not match.\"\n            }\n            return errors;\n        },\n    })\n\n    if (redirect) {\n        return <Redirect to={\"/login\"}/>\n    }\n    if (shipment) {\n        return <div>You have successfully restored your password.</div>\n    }\n    return (\n        <div className={s.formWrapper}>\n            {status ? <Preloader/> : \"\"}\n            <h1>Password recovery page</h1>\n            <p>Please enter your new password.</p>\n            <form onSubmit={formik.handleSubmit}>\n                <InputText name={\"password\"} value={formik.values.password} onChange={formik.handleChange}\n                           actionEnter={() => {\n                           }} type={\"text\"}/>\n                <InputText name={\"passwordRepeat\"} value={formik.values.passwordRepeat} onChange={formik.handleChange}\n                           actionEnter={() => {\n                           }} type={\"password\"}/>\n                {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                <Button value={\"send\"} action={formik.handleSubmit} type={\"submit\"} disabled={status}\n                        mode={status ? \"red\" : null}/>\n            </form>\n            <span>{networkErrorMessage}</span>\n        </div>\n    );\n}\n\nexport type FormikErrorType = {\n    password?: string\n}\n","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport s from \"./Header.module.scss\"\nimport {Button} from \"../Button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logoutTC, RequestStatusType} from \"../../features/Login/auth-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Preloader} from \"../Preloader/Preloader\";\n\nexport const Header = () => {\n\n    const dispatch = useDispatch()\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.login.status)\n\n    const logout = () => {\n        dispatch(logoutTC())\n    }\n\n    return (\n        <>\n            {status === 'loading' && <Preloader/>}\n            <header className={s.header}>\n                <nav>\n                    <ul className={s.navList}>\n                        <NavLink className={s.navLink} to=\"/\" activeClassName={\"\"}>\n                            <li className={s.linkItem}> Profile</li>\n                        </NavLink>\n\n                        {!isLogged\n                            ? <NavLink className={s.navLink} to=\"login\" activeClassName={\"\"}>\n                                <li className={s.linkItem}> Login</li>\n                            </NavLink>\n                            : null}\n                        <NavLink className={s.navLink} to=\"signup\" activeClassName={\"\"}>\n                            <li className={s.linkItem}> Signup</li>\n                        </NavLink>\n                        {isLogged ? <Button value={\"Log out\"} action={logout}/> : null}\n\n                    </ul>\n                </nav>\n            </header>\n        </>);\n}","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"./store\";\nimport {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\nimport {SetIsLoggedType, setIsLoggedAC} from \"../features/Login/auth-reducer\";\n\nconst initialState: InitialStateType = {\n    isInitialized: false,\n    status: \"idle\",\n    error: null\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'APP_SET_INITIALIZED':\n            return {...state, isInitialized: action.isInitialized}\n        case \"SET_STATUS_APP\":\n            return {...state, status: action.status}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP_SET_INITIALIZED', isInitialized} as const)\nexport const setStatusAppAC = (status: RequestStatusType) => ({type: 'SET_STATUS_APP', status} as const)\nexport const setAppErrorAC = (error: string | null) => ({type: 'SET_APP_ERROR', error} as const)\n\n//Thunk creators\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setStatusAppAC('loading'))\n    authAPI.me()\n        .then((res) => {\n            dispatch(setStatusAppAC('succeeded'))\n            dispatch(setIsLoggedAC(true));\n        })\n        .catch((err) => {\n            alert(err)\n        })\n        .finally(() => {\n            dispatch(setIsInitializedAC(true))\n        })\n}\n\n\n//types\ntype ActionsTypes =\n    | ReturnType<typeof setIsInitializedAC>\n    | ReturnType<typeof setStatusAppAC>\n    | ReturnType<typeof setAppErrorAC>\n    | SetIsLoggedType\n\nexport type ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype InitialStateType = {\n    isInitialized: boolean\n    status: RequestStatusType\n    error: string | null\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\n\n\n\n\n\n","import React, {useEffect} from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport {Profile} from \"../features/Profile/Profile\";\nimport {Login} from \"../features/Login/Login\";\nimport {SignUp} from \"../features/SignUp/SignUp\";\nimport {Recovery} from \"../features/Recovery/Recovery\";\nimport {Initiate} from \"../features/Initiate/Initiate\";\nimport {Header} from \"../components/Header/Header\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {initializeAppTC} from \"./app-reducer\";\nimport {AppRootStateType} from \"./store\";\nimport {Preloader} from \"../components/Preloader/Preloader\";\nimport s from \"./App.module.scss\"\nfunction App(){\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    },[])\n\n    if (!isInitialized) {\n         return <Preloader/>\n    }\n\n    return (\n        <div className={s.App}>\n            <Header/>\n            <Switch>\n                <Route exact path={[\"/Fridayapp\", \"/\"]} render={() => <Profile/>}/>\n                <Route path={\"/login\"} render={() => <Login/>}/>\n                <Route path={\"/signup\"} render={() => <SignUp/>}/>\n                <Route path={\"/recovery\"} render={() => <Recovery/>}/>\n                <Route path={\"/initiate/:token\"} render={() => <Initiate/>}/>\n                <Route path={\"/404\"} render={() => <h1>Error 404. Page not found.</h1>}/>\n                <Redirect from={\"*\"} to={\"/404\"}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, applyMiddleware} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from \"./app-reducer\";\nimport {recoveryReducer} from \"../features/Recovery/recovery-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {signUpReducer} from \"../features/SignUp/signup-reducer\";\n\nconst rootReducer = combineReducers({\n    app: appReducer,\n    login: authReducer,\n    signup: signUpReducer,\n    recovery: recoveryReducer,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer> ;\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <HashRouter><React.StrictMode>\n        <Provider store={store}>\n            <App  />\n        </Provider>\n    </React.StrictMode></HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}