{"version":3,"sources":["features/Packs/Packs-reducer.ts","api/api.ts","app/app-reducer.ts","features/Login/auth-reducer.ts","components/InputText/InputText.tsx","components/Button/Button.tsx","components/Preloader/Preloader.tsx","components/InputCheckbox/InputCheckbox.tsx","features/Login/Login.tsx","features/SignUp/signup-reducer.ts","features/SignUp/SignUp.tsx","features/Recovery/recovery-reducer.ts","utils/customHooks.ts","features/Recovery/Recovery.tsx","features/Initiate/Initiate.tsx","components/Header/Header.tsx","features/Cards/Cards-reducer.ts","features/Packs/Pack/Pack.tsx","components/Modal/Modal.tsx","components/Table/Table.tsx","components/FindForm/FindForm.tsx","components/Select/Select.tsx","components/Paginator/Paginator.tsx","features/Packs/Packs.tsx","features/Main/Main.tsx","features/Cards/TableCards/Card/Card.tsx","features/Cards/TableCards/TableCards.tsx","features/Cards/Cards.tsx","features/LearningProcess/learningProcess-reducer.ts","features/LearningProcess/LearningProcess.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx","components/FindForm/FindForms.module.scss","components/Paginator/Paginator.module.scss","components/Table/Table.module.scss","common/styles/common.module.scss","features/Cards/TableCards/Card/Card.module.scss","features/Cards/TableCards/TableCards.module.scss","features/Packs/Pack/Pack.module.scss","components/Modal/Modal.module.css","features/Login/Login.module.scss","features/SignUp/SignUp.module.scss","features/Packs/Packs.module.scss","assets/img/backgroundPack.jpg","app/App.module.scss","components/Button/Button.module.scss","components/InputCheckbox/InputCheckbox.module.scss","components/InputText/InputText.module.scss","components/Preloader/Preloader.module.scss","features/LearningProcess/LearningProcess.module.scss","assets/img/loader.gif","features/Cards/Cards.module.scss","assets/img/empty.png","assets/img/full.png","components/Header/Header.module.scss"],"names":["SortType","instance","axios","create","baseURL","withCredentials","authAPI","email","post","password","resetPasswordToken","data","delete","PacksAPI","packName","min","max","sortPacks","page","pageCount","get","cardsPack","packID","CardsAPI","cardsPack_id","cardQuestion","card","cardID","card_id","grade","put","initialState","isInitialized","status","error","myUserID","setStatusAppAC","type","setMyUserIdAC","id","isLoggedIn","setIsLoggedAC","value","setLoginErrorAC","InputText","props","className","s","inputText","onChange","onKeyPress","e","key","actionEnter","name","placeholder","Button","mode","btn","onClick","action","disabled","Preloader","overlay","wrapper","src","preloader","alt","InputCheckBox","checkbox","checked","active","input","changeStatus","Login","dispatch","useDispatch","isLogged","useSelector","state","login","errorLogin","appStatus","app","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","statusText","_id","catch","response","setTimeout","finally","to","formWrapper","styles","loginTitle","handleSubmit","handleChange","forgot","activeClassName","isRegistered","registrationError","setRegistrationErrorAC","SignUp","signup","registerTitle","getFieldProps","linkToLogin","isShipment","setIsShipment","shipment","showError","useRedirect","useState","redirect","makeRedirect","useEffect","timeoutId","clearTimeout","Recovery","networkErrorMessage","recovery","a","resetForm","style","color","Initiate","token","useParams","passwordRepeat","newPassword","resetPasswordTC","Header","cards","header","logo","navList","navLink","navLinkActive","linkItem","packs","pageSize","totalPacksCount","currentPage","isFetching","findPackName","update","setCardPacksTotalCountAC","count","setPageSizeAC","setMinMaxValueAC","setCurrentPageAC","getPacksTC","user_id","cardPacks","cardPacksTotalCount","totalCardsCount","currentPackID","currentPackUserID","getCardsTC","cardsTotalCount","Pack","changeCurrentPackID","userID","setCurrentPackIdAC","packBlock","backgroundImage","backgroundPack","packTitle","pack","slice","cardsCount","cursor","aria-disabled","author","user_name","start","link","deleteButton","openModalRemovePack","Modal","title","children","onClose","duration","showCloseBtn","modal","useRef","modalBg","modalContent","document","body","overflow","current","classList","add","transitionDuration","opacity","top","remove","modalCloseHandler","ref","modal_bg","modal_inner","modal_head","modal_body","modal_foot","TablePacks","isModalAddPackOpened","setIsModalAddPackOpened","isModalRemovePackOpened","setIsModalRemovePackOpened","setPackID","newPack","createPackTC","useCallback","removePack","removePackTC","tablePacksBlock","tablePackContainer","map","p","addBtn","addPackBlock","buttonBlock","deletePackBlock","warnText","cancelButton","FindForm","setUpdateNamePacks","setUpdatePacksAC","stringSearch","findFormWrapper","findForm","inputPacks","range","line","step","dots","defaultValue","onAfterChange","sortList","sortItem","arrowUp","arrowDown","btns","Select","choosePageSize","submitForm","filters","display","label","Paginator","totalItemsCount","onChangePage","portionSize","pagesCount","Math","ceil","pages","i","push","lastPage","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionNumber","paginatorWrapper","btnLeft","pagesList","selectedPage","pagesItems","filter","btnRight","Packs","commonStyles","container","content","stickyContainer","settings","packsWrapper","paginator","Main","Card","flip","setFlip","box","openModalRemoveCard","boxInner","boxFront","text","question","boxBack","answer","TableCards","isModalAddCardOpened","setIsModalAddCardOpened","isModalRemoveCardOpened","setIsModalRemoveCardOpened","setCardID","tableCardBlock","deleteCard","c","Cards","packId","console","log","cardsWrapper","toString","setCurrentCardPageAC","currentCard","rate","setCurrentCardAC","LearningProcess","learningProcess","floor","random","setRate","currentCardId","setCurrentCardRateAC","updatedGrade","setRateThunk","learnWrapper","initialRating","emptySymbol","empty","width","height","fullSymbol","full","nextBtn","App","err","exact","path","render","from","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.34359065.chunk.js","sourcesContent":["import {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {SetStatusApp, setStatusAppAC} from \"../../app/app-reducer\";\nimport {PacksAPI, PackType, PostPackParamsType} from \"../../api/api\";\n\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_PACKS_TOTAL_COUNT = \"SET_PACKS_TOTAL_COUNT\";\nconst SET_PACKS_NAME = \"SET_PACKS_NAME\";\nconst SET_PAGE_SIZE = \"SET_PAGE_SIZE\";\nconst SET_MIN_MAX_VALUE = \"SET_MIN_MAX_VALUE\";\nconst SET_UPDATE_PACKS = \"SET_UPDATE_PACKS\";\n\nexport enum SortType {\n    Z = 0,\n    A = 1\n}\nconst initialState: InitialStateType = {\n    packs: [],\n    pageSize: \"6\",\n    totalPacksCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    findPackName: \"\",\n    min: 0,\n    max: 20,\n    update: \"0update\"\n}\n\n\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_CURRENT_PAGE:\n            return {\n                ...state, currentPage: action.currentPage\n            }\n        case SET_PACKS_TOTAL_COUNT:\n            return {\n                ...state, totalPacksCount: action.count\n            }\n        case SET_PACKS_NAME:\n            return {...state, findPackName: action.packName}\n        case SET_PAGE_SIZE:\n            return {\n                ...state, pageSize: action.pageSize\n            }\n        case  SET_MIN_MAX_VALUE:\n            return {\n                ...state, min: action.value[0], max: action.value[1]\n            }\n        case SET_UPDATE_PACKS:\n            return {\n                ...state, update:action.value\n            }\n        case \"SET-PACKS\":\n            return {...state, packs: [...action.packs]}\n        case \"REMOVE-PACK\":\n            return {...state, packs: state.packs.filter(i => i._id !== action.packID)}\n        case \"CREATE-PACK\":\n            return {...state, packs: [action.newPack, ...state.packs]}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setCardPacksTotalCountAC = (count: number) => ({type: SET_PACKS_TOTAL_COUNT, count} as const)\nexport const setPacksNameAC = (packName: string) => ({type: SET_PACKS_NAME, packName} as const)\nexport const setPageSizeAC = (pageSize: string) => ({type: SET_PAGE_SIZE, pageSize} as const)\nexport const setMinMaxValueAC = (value: Array<number>) => ({type: SET_MIN_MAX_VALUE, value} as const)\nexport const setUpdatePacksAC = (value: string) => ({type: SET_UPDATE_PACKS, value} as const)\nexport const setCurrentPageAC = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\nexport const setPacksAC = (packs: Array<PackType>) => ({type: 'SET-PACKS', packs} as const)\nexport const removePackAC = (packID: string) => ({type: 'REMOVE-PACK', packID} as const)\nexport const createPackAC = (newPack: PackType) => ({type: 'CREATE-PACK', newPack} as const)\n\n//Thunk creators\nexport const getPacksTC = (packName?:string,min?: number, max?: number, sortPacks?: string,page?: number, pageCount?: number,  user_id?: string,) => {\n    return (dispatch: Dispatch<ActionsTypes>) => {\n        dispatch(setStatusAppAC(\"loading\"))\n        PacksAPI.getPacks(packName, min,max,sortPacks,page,pageCount,)\n            .then((res) => {\n                dispatch(setPacksAC(res.data.cardPacks))\n                dispatch(setCardPacksTotalCountAC(res.data.cardPacksTotalCount))\n                dispatch(setStatusAppAC(\"succeeded\"))\n            })\n    }\n}\nexport const removePackTC = (packID: string) => {\n    return (dispatch: Dispatch<any>) => {\n        dispatch(setStatusAppAC(\"loading\"))\n        PacksAPI.deletePack(packID)\n            .then((res) => {\n                dispatch(getPacksTC())\n                dispatch(setStatusAppAC(\"succeeded\"))\n            })\n    }\n}\nexport const createPackTC = (packName: string) => {\n    const newPack: PostPackParamsType = {name: packName}\n    return (dispatch: Dispatch<any>)  => {\n        dispatch(setStatusAppAC(\"loading\"))\n        PacksAPI.postPack(newPack)\n            .then( (res) => {\n                dispatch(getPacksTC())\n                dispatch(setStatusAppAC(\"succeeded\"))\n            })\n    }\n}\n\n//types\ntype ActionsTypes =\n    | SetCurrentPageAC\n    | ReturnType<typeof setPacksAC>\n    | ReturnType<typeof removePackAC>\n    | ReturnType<typeof createPackAC>\n    | ReturnType<typeof setCardPacksTotalCountAC>\n    | ReturnType<typeof setPacksNameAC>\n    | SetPageSize\n    | ReturnType<typeof setMinMaxValueAC>\n    | ReturnType<typeof setUpdatePacksAC>\n    | SetStatusApp\n    | SetCardPacksTotalCountActionType\n\nexport type SetCardPacksTotalCountActionType =  ReturnType<typeof setCardPacksTotalCountAC>\nexport type SetCurrentPageAC =  ReturnType<typeof setCurrentPageAC>\nexport type SetPageSize =ReturnType<typeof setPageSizeAC>\n\ntype ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\nexport type InitialStateType = {\n    packs: Array<PackType>\n    pageSize: any\n    totalPacksCount: number\n    currentPage: number\n    isFetching: boolean\n    findPackName: string\n    min: number\n    max: number\n    update: string\n}\n\n\n\n\n\n\n\n\n","import axios from \"axios\";\nimport {LoginParamsType} from \"../features/Login/auth-reducer\";\n\nconst settings = {\n    withCredentials: true\n}\n\n\nlet localBack = \"http://localhost:7542/2.0\"\nlet serverBack = \"https://neko-back.herokuapp.com/2.0\"\nconst instance = axios.create({\n    baseURL: serverBack,\n\n    ...settings\n})\n\nexport const authAPI = {\n    forgotPassword(email: string) {\n        return instance.post<ForgotPasswordResponseType>(\"/auth/forgot\", {\n            email,\n            \"from\": \"test-front-admin <ai73a@yandex.by>\",\n            \"message\": \"<div style= 'background-color: #b8b8b8; padding: 15px'> \" +\n                \"password recovery link: <a href='https://ad1n1993.github.io/Fridayapp/#/initiate/$token$'> \" +\n                \"Click the link to restore access to your account \" +\n                \"</a>\" +\n                \"</div>\"\n        })\n    },\n    setNewPassword(password: string, resetPasswordToken: string) {\n        return instance.post<{ info: string }>(\"/auth/set-new-password\", {password, resetPasswordToken})\n    },\n    login(data: LoginParamsType) {\n        return instance.post(`/auth/login`, data)\n    },\n    logout() {\n        return instance.delete(\"/auth/me\")\n    },\n    registered(data: RegistrationParamsType) {\n        return instance.post<RegistrationResponseType>('/auth/register', data)\n    },\n    me() {\n        return instance.post('auth/me')\n    }\n}\nexport const PacksAPI = {\n    getPacks(packName: string = \"\", min: number = 0, max: number = 20, sortPacks: string = '0', page: number = 1, pageCount: number = 6, user_id?: string,) {\n        return instance.get<GetPacksResponseType>(\n            `/cards/pack?packName=${packName}&min=${min}&max=${max}&sortPacks=${sortPacks}&page=${page}&pageCount=${pageCount}`\n        )\n    },\n    postPack(cardsPack: PostPackParamsType) {\n        return instance.post('/cards/pack', {cardsPack: cardsPack})\n    },\n    deletePack(packID: string) {\n        return instance.delete(`/cards/pack?id=${packID}`)\n    },\n    putPack(cardsPack: PutPackParamsType) {\n        return instance.put('/cards/pack', cardsPack)\n    }\n}\nexport const CardsAPI = {\n    getCards(cardsPack_id: string, cardQuestion: string = \" \", page: number = 1, pageCount: number = 50, min: number = 1, max: number = 4) {\n        return instance.get<GetCardsResponseType>(`/cards/card?cardsPack_id=${cardsPack_id}&cardQuestion=${cardQuestion}&page=${page}&pageCount=${10},`)\n    },\n    postCard(card: PostCardParamsType) {\n        debugger\n        return instance.post('cards/card', {card: card})\n    },\n    deleteCard(cardID: string) {\n        return instance.delete(`cards/card?id=${cardID}`)\n    },\n    putCard(card: PutCardParamsType) {\n        return instance.put('cards/card', card)\n    },\n    gradeCard(card_id: string, grade: number) {\n        return instance.put<GradeCardResponseType>('cards/grade', {card_id, grade})\n    }\n}\n\n\n//types\nexport type RegistrationParamsType = {\n    email: string,\n    password: string\n}\nexport type  ForgotPasswordResponseType = {\n    \"info\": string,\n    \"success\": boolean,\n    \"answer\": boolean,\n    \"html\": boolean\n}\nexport type RegistrationResponseType = {\n    addedUser: {\n        created: string\n        email: string\n        isAdmin: boolean\n        name: string\n        publicCardPacksCount: number\n        rememberMe: boolean\n        updated: string\n        verified: boolean\n        __v: number\n        _id: string\n    }\n}\nexport type GetPacksResponseType = {\n    cardPacks: Array<PackType>\n    page: number\n    pageCount: number\n    cardPacksTotalCount: number\n    minCardsCount: number\n    maxCardsCount: number\n    token: string\n    tokenDeathTime: number\n}\nexport type GetCardsResponseType = {\n    cards: Array<CardType>\n    page: number\n    pageCount: number\n    cardsTotalCount: number\n    minGrade: number\n    maxGrade: number\n    token: string\n    tokenDeathTime: number\n}\nexport type PackType = {\n    _id: string\n    user_id: string\n    user_name: string\n    private: boolean\n    name: string\n    path: string\n    grade: number\n    shots: number\n    cardsCount: number\n    type: string\n    rating: number\n    created: string\n    updated: string\n    more_id: string\n    __v: number\n}\nexport type CardType = {\n    _id: string\n    cardsPack_id: string\n    user_id: string\n    answer: string\n    question: string\n    grade: number\n    shots: number\n    questionImg: string\n    comments: string\n    type: string\n    rating: number\n    more_id: string\n    created: string\n    updated: string\n    __v: number\n}\nexport type PostPackParamsType = {\n    name: string\n    path?: string\n    grade?: number\n    shots?: number\n    rating?: number\n    deckCover?: string\n    private?: boolean\n    type?: string\n}\nexport type PutPackParamsType = {\n    _id: string\n    name?: string\n}\nexport type PostCardParamsType = {\n    cardsPack_id: string\n    question?: string\n    answer?: string\n    grade?: 0 | 1 | 2 | 3 | 4 | 5\n    shots?: number\n    rating?: number\n    answerImg?: string\n    questionImg?: string\n    questionVideo?: string\n    answerVideo?: string\n    type?: string\n}\nexport type PutCardParamsType = {\n    _id: string\n    question?: string\n    comments?: string\n}\nexport type GradeCardResponseType = {\n    token: string\n    tokenDeathTime: number\n    updatedGrade: {\n        card_id: string\n        cardsPack_id: string\n        created: string\n        grade: number\n        more_id: string\n        shots: number\n        updated: string\n        user_id: string\n        __v: number\n        _id: string\n    }\n}\n\n","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"./store\";\nimport {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\nimport {SetIsLoggedType, setIsLoggedAC} from \"../features/Login/auth-reducer\";\n\nconst initialState: InitialStateType = {\n    isInitialized: false,\n    status: \"idle\",\n    error: null,\n    myUserID: \"\",\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'APP_SET_INITIALIZED':\n            return {...state, isInitialized: action.isInitialized}\n        case \"SET_STATUS_APP\":\n            return {...state, status: action.status}\n        case \"SET_MY_USER_ID\":\n            return {...state, myUserID: action.id}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP_SET_INITIALIZED', isInitialized} as const)\nexport const setStatusAppAC = (status: RequestStatusType) => ({type: 'SET_STATUS_APP', status} as const)\nexport const setAppErrorAC = (error: string | null) => ({type: 'SET_APP_ERROR', error} as const)\nexport const setMyUserIdAC = (id: string) => ({type: 'SET_MY_USER_ID', id} as const)\n\n//Thunk creators\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setStatusAppAC('loading'))\n    authAPI.me()\n        .then((res) => {\n            dispatch(setStatusAppAC('succeeded'))\n            dispatch(setIsLoggedAC(true));\n            dispatch(setMyUserIdAC(res.data._id))\n        })\n        .catch((err) => {})\n        .finally(() => {\n            dispatch(setIsInitializedAC(true))\n            dispatch(setStatusAppAC('succeeded'))\n        })\n}\n\n\n//types\nexport type SetStatusApp = ReturnType<typeof setStatusAppAC >\nexport type SetUserId = ReturnType<typeof setMyUserIdAC >\ntype ActionsTypes =\n    | ReturnType<typeof setIsInitializedAC>\n    | SetStatusApp\n    | ReturnType<typeof setAppErrorAC>\n    | SetUserId\n    | SetIsLoggedType\n\nexport type ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype InitialStateType = {\n    isInitialized: boolean\n    status: RequestStatusType\n    error: string | null,\n    myUserID: string\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\n\n\n\n\n\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../../api/api\";\nimport {setMyUserIdAC, setStatusAppAC, SetUserId} from \"../../app/app-reducer\";\n\n\nconst initialState = {\n    isLoggedIn: false,\n    error: '',\n}\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case \"SET_IS_LOGGED\":\n            return {...state, isLoggedIn: action.value}\n        case \"SET_LOGIN_ERROR\":\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsLoggedAC = (value: boolean) =>\n    ({type: \"SET_IS_LOGGED\", value} as const)\n\nexport const setLoginErrorAC = (error: string) =>\n    ({type: \"SET_LOGIN_ERROR\", error} as const)\n\n\n//Thunk creators\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setStatusAppAC('loading'))\n    authAPI.login(data)\n        .then((res) => {\n            if (res.statusText === \"OK\") {\n                dispatch(setIsLoggedAC(true))\n                dispatch(setMyUserIdAC(res.data._id))\n            }\n        })\n        .catch((e) => {\n            const error = e.response.data.error\n            dispatch(setLoginErrorAC(error))\n            setTimeout(() => dispatch(setLoginErrorAC(\"\")), 5000);\n\n        })\n        .finally(() => {\n                dispatch(setStatusAppAC('succeeded'))\n            }\n        )\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setStatusAppAC('loading'))\n    authAPI.logout()\n        .then((res) => {\n            if (res.statusText === \"OK\") {\n                dispatch(setIsLoggedAC(false))\n                dispatch(setMyUserIdAC(res.data._id))\n            }\n        })\n        .finally(() => {\n            dispatch(setStatusAppAC('succeeded'))\n        })\n}\n\n//types\ntype InitialStateType = typeof initialState;\n\nexport type SetIsLoggedType = ReturnType<typeof setIsLoggedAC>\ntype ActionsTypes =\n    SetIsLoggedType |\n    ReturnType<typeof setLoginErrorAC> |\n    ReturnType<typeof setStatusAppAC> | SetUserId\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport s from \"./InputText.module.scss\"\n\ntype InputTextTypeProps = {\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\n    actionEnter?: () => void;\n    error?: boolean\n    name?:string\n    placeholder?:string\n    type:string\n\n}\n\nexport const InputText = (props: InputTextTypeProps) => {\n\n    const actionEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter' && props.actionEnter) {\n            props.actionEnter();\n        }\n\n    }\n    return (\n        <>\n            <input className={`${s.inputText} ${props.error && props.value !==\"\" ? s.error : \"\"}`}\n                   type={props.type}\n                   value={props.value}\n                   onChange={props.onChange}\n                   onKeyPress={actionEnter}\n                   name={props.name}\n                   placeholder={props.placeholder}\n            />\n        </>\n    );\n}","import React from \"react\";\nimport s from \"./Button.module.scss\"\n\ntype ButtonTypeProps = {\n    value: string\n    action: () => void\n    mode?: \"red\"|null\n    type?: \"button\" | \"submit\" | \"reset\" | undefined\n    disabled?: boolean\n}\n\nexport const Button = (props:ButtonTypeProps) =>{\n    return(\n        <button\n            className={props.mode === \"red\" ? `${s.btn}  ${s.error}`:  s.btn}\n            onClick={props.action}\n            type={props.type}\n            disabled={props.disabled}\n        >\n            {props.value}\n        </button>\n    );\n}","import React from \"react\";\nimport s from \"./Preloader.module.scss\"\nimport preloader from \"../../assets/img/loader.gif\"\n\nexport const Preloader = () => {\n    return(\n        <div className={s.overlay}>\n        <div className={s.wrapper}>\n            <img src={preloader} alt=\"loading...\"/>\n        </div>\n        </div>\n    );\n}","import React, {ChangeEvent} from \"react\";\nimport s from \"./InputCheckbox.module.scss\"\n\ntype inputCheckboxTypeProps = {\n    checked: boolean\n    changeStatus: (e: ChangeEvent<HTMLInputElement>) => void\n    value: string;\n    id?: number\n    name?:string\n}\n\nexport const InputCheckBox = (props: inputCheckboxTypeProps) => {\n\n    // const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n    //     let id = props.id || +e.currentTarget.id;\n    //     props.changeStatus(e.currentTarget.checked, id);\n    // }\n    return (\n        <>\n            <label className={`${s.checkbox} ${props.checked ? s.active : \"\"}`}>\n                <input className={s.input} type=\"checkbox\"  checked={props.checked} onChange={props.changeStatus} name={\"rememberMe\"}/>\n                <span>{props.value}</span>\n            </label>\n        </>\n    );\n}","import React from \"react\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport styles from \"./Login.module.scss\"\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {InputCheckBox} from \"../../components/InputCheckbox/InputCheckbox\";\nimport s from \"../../common/styles/common.module.scss\"\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const errorLogin = useSelector<AppRootStateType, string>(state => state.login.error)\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n    type FormikErrorType = {\n        email?: string\n        password?: string\n        rememberMe?: boolean\n    }\n\n    const formik = useFormik({\n\n        initialValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n        },\n        validate: values => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 6) {\n                errors.password = 'Must be 6 characters or less';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        }\n    })\n\n    if (isLogged) {\n        return <Redirect to={\"/\"}/>\n    }\n\n    return (\n        <div className={s.formWrapper}>\n            <h2 className={styles.loginTitle}>Welcome</h2>\n            <p>Learning is easy - let`s start!</p>\n            <form onSubmit={formik.handleSubmit}>\n                <InputText name={\"email\"} value={formik.values.email}\n                           onChange={formik.handleChange}\n                           placeholder={\"Email\"}\n                           actionEnter={() => {\n                           }} type={\"text\"}/>\n                {formik.errors.email ? <div className={styles.errorLogin}>{formik.errors.email}</div> : null}\n                <InputText name={\"password\"} value={formik.values.password}\n                           onChange={formik.handleChange}\n                           placeholder={\"Password\"}\n                           actionEnter={() => {\n                           }} type={\"password\"}/>\n                {formik.errors.password ? <div className={styles.errorLogin}>{formik.errors.password}</div> : null}\n                {errorLogin && <div className={styles.errorLogin}>{errorLogin}</div>}\n                {appStatus === 'loading' && <Preloader/>}\n                <InputCheckBox checked={formik.values.rememberMe} changeStatus={formik.handleChange}\n                               value={\"remember me\"} name={\"rememberMe\"}/>\n                <NavLink className={styles.forgot} to=\"recovery\" activeClassName={\"\"}>\n                    <span className={s.forgot}> Forgot password?</span>\n                </NavLink><br/>\n                <div className={styles.btn}>\n                    <Button value={\"send\"} action={formik.handleSubmit} type={\"submit\"}/>\n                </div>\n\n\n            </form>\n\n        </div>\n    );\n}","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {authAPI, RegistrationParamsType} from \"../../api/api\";\nimport {setStatusAppAC} from \"../../app/app-reducer\";\nimport {Dispatch} from \"redux\";\n\nconst initialState: InitialStateType = {\n    isRegistered: false,\n    registrationError: null\n}\n\nexport const signUpReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SET-IS-REGISTERED':\n            return {...state, isRegistered: action.isRegistered}\n        case \"SET-REGISTRATION-ERROR\":\n            return {...state, registrationError: action.error}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsRegisteredAC = (isRegistered: boolean) => ({type: 'SET-IS-REGISTERED', isRegistered} as const)\nexport const setRegistrationErrorAC = (error: null | string) => ({type: 'SET-REGISTRATION-ERROR', error} as const)\n\n\n//Thunk creators\nexport const registrationTC = (data: RegistrationParamsType) => {\n    return  (dispatch: Dispatch<ActionsTypes>) => {\n        dispatch(setStatusAppAC('loading'))\n        authAPI.registered(data)\n            .then( (res) => {\n                dispatch(setIsRegisteredAC(true))\n            })\n            .catch( (error) => {\n                dispatch(setRegistrationErrorAC(error.response.data.error))\n                setTimeout(() => dispatch(setRegistrationErrorAC(\"\")), 5000);\n            })\n            .finally( () => {\n                dispatch(setStatusAppAC('succeeded'))\n            })\n    }\n}\n\n//types\ntype ActionsTypes =\n    | ReturnType<typeof setIsRegisteredAC>\n    | ReturnType<typeof setStatusAppAC>\n    | ReturnType<typeof setRegistrationErrorAC>\n\n\ntype ThunksDispatch = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype InitialStateType = {\n    isRegistered: boolean\n    registrationError: null | string\n};\n\n\n\n\n\n\n\n","import React from \"react\";\nimport styles from \"./SignUp.module.scss\"\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {useFormik} from \"formik\";\nimport {Button} from \"../../components/Button/Button\";\nimport {registrationTC} from \"./signup-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {AppRootStateType} from \"../../app/store\";\nimport { Preloader } from \"../../components/Preloader/Preloader\";\nimport s from \"../../common/styles/common.module.scss\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n}\n\nexport const SignUp = () => {\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.signup.isRegistered)\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const registrationError = useSelector<AppRootStateType, null | string>(state => state.signup.registrationError)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n        },\n        onSubmit: values => {\n            dispatch(registrationTC(values))\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 7) {\n                errors.password = 'Password must be at least 7 characters';\n            }\n            return errors;\n        },\n    })\n\n    if (isRegistered) {\n        return <Redirect to={'/login'}/>\n    }\n    if (appStatus === \"loading\") {\n        return <Preloader/>\n    }\n    return (\n        <div className={s.formWrapper}>\n            <h3 className={styles.registerTitle}>\n                Create an account and start learning.</h3>\n            <form>\n                <InputText placeholder={'Email'}\n                           type={'text'}\n                           {...formik.getFieldProps('email')}\n                />\n                {formik.errors.email && <div className={styles.error}>{formik.errors.email}</div>}\n                <InputText placeholder={'Password'}\n                           type='password'\n                           {...formik.getFieldProps('password')}\n                />\n                {formik.errors.password && <div className={styles.error}>{formik.errors.password}</div>}\n                <Button disabled={false} type='submit' value='register' action={formik.handleSubmit}/>\n            </form>\n                <NavLink className={styles.linkToLogin} to='login'>\n                    <span>\n                    Already have an account?</span>\n                </NavLink>\n            {registrationError && <div className={styles.registrationError}>{registrationError}</div>}\n        </div>\n    );\n}","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {authAPI} from \"../../api/api\";\nimport {setStatusAppAC} from \"../../app/app-reducer\";\nimport {Dispatch} from \"redux\";\n\nconst RECOVERY_SET_SHIPMENT = \"RECOVERY_SET_SHIPMENT\";\nconst RECOVERY_SHOW_ERROR = \"RECOVERY_SHOW_ERROR\";\n\nconst initialState: InitialRecoveryStateType = {\n    error: \"\",\n    isShipment: false,\n}\n\nexport const recoveryReducer = (state: InitialRecoveryStateType = initialState, action: ActionsTypes): InitialRecoveryStateType => {\n    switch (action.type) {\n        case RECOVERY_SET_SHIPMENT:\n            return {\n                ...state, isShipment: action.shipment\n            }\n        case RECOVERY_SHOW_ERROR:\n            return {\n                ...state, error: action.error\n            }\n        default:\n            return {...state}\n    }\n}\n\n//Action creators\nconst setIsShipment = (shipment: boolean) => ({type: RECOVERY_SET_SHIPMENT, shipment} as const);\nconst showError = (error: string) => ({type: RECOVERY_SHOW_ERROR, error} as const);\n\n//Thunk creators\nexport const recoveryRequestTC = (email: string): ThunkType => {\n    return async (dispatch: Dispatch<ActionsTypes>) => {\n        dispatch(setStatusAppAC('loading'))\n        try {\n            await authAPI.forgotPassword(email);\n            dispatch(setIsShipment(true));\n            dispatch(setStatusAppAC('succeeded'))\n        } catch (error) {\n            dispatch(showError(error.response.data.error));\n            dispatch(setStatusAppAC('succeeded'))\n        }\n    }\n}\n\nexport const resetPasswordTC = (newPassword: string, token: string): ThunkType => {\n    return async (dispatch: Dispatch<ActionsTypes>) => {\n        dispatch(setStatusAppAC('loading'))\n        try {\n            await authAPI.setNewPassword(newPassword, token);\n            dispatch(setIsShipment(true))\n            dispatch(setStatusAppAC('succeeded'))\n        } catch (error) {\n            dispatch(showError(error.response.data.error));\n            setTimeout(() => dispatch(showError(\"\")), 5000);\n        }\n    }\n}\n\n//types\nexport type InitialRecoveryStateType = {\n    error: string\n    isShipment: boolean\n};\n\ntype ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype ActionsTypes =\n    | ReturnType<typeof setIsShipment>\n    | ReturnType<typeof showError>\n    | ReturnType<typeof setStatusAppAC>","import {useEffect, useState} from \"react\";\n\n\nexport const useRedirect = (shipment: boolean) => {\n    const [redirect, makeRedirect] = useState(false);\n    useEffect(() => {\n        const timeoutId = setTimeout(() => {\n            if (!shipment) return;\n            makeRedirect(true);\n        }, 5000);\n        return () => clearTimeout(timeoutId);\n    }, [shipment]);\n    return redirect;\n}","import React from \"react\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {recoveryRequestTC} from \"./recovery-reducer\";\nimport {Redirect} from 'react-router-dom';\nimport {AppRootStateType} from \"../../app/store\";\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {useRedirect} from \"../../utils/customHooks\";\nimport s from \"../../common/styles/common.module.scss\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\n\nexport const Recovery = () => {\n    const networkErrorMessage = useSelector<AppRootStateType, string>(state => state.recovery.error);\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n    const shipment = useSelector<AppRootStateType, boolean>(state => state.recovery.isShipment);\n    const redirect = useRedirect(shipment);\n\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n        },\n        onSubmit: values => {\n            dispatch(recoveryRequestTC(values.email))\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n    })\n\n    if (redirect) {\n        return <Redirect to={\"/login\"}/>\n    }\n    if (shipment) {\n        return <div>Instructions for password recovery have been sent to your email address.</div>\n\n    }\n\n    return (\n        <div className={s.formWrapper}>\n            {appStatus === \"loading\" ? <Preloader/> : \"\"}\n            <h2>Forgot password?</h2>\n            <p>Please enter your email address.</p>\n            <form onSubmit={formik.handleSubmit}>\n                <InputText name={\"email\"} value={formik.values.email} onChange={formik.handleChange}\n                           actionEnter={() => {\n                           }} type={\"text\"}/>\n                {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                <p style={{color: \"red\"}}>{networkErrorMessage}</p>\n                <Button value={\"send\"} action={formik.handleSubmit} type={\"submit\"} disabled={appStatus === \"loading\"}\n                        mode={appStatus === \"loading\" ? \"red\" : null}/>\n            </form>\n        </div>\n    );\n}\n\nexport type FormikErrorType = {\n    email?: string\n}\n","import React from \"react\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport {useFormik} from \"formik\";\nimport {Redirect, useParams} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {resetPasswordTC} from \"../Recovery/recovery-reducer\";\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {useRedirect} from \"../../utils/customHooks\";\nimport s from \"../../app/App.module.scss\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\n\nexport const Initiate = () => {\n\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n    const shipment = useSelector<AppRootStateType, boolean>(state => state.recovery.isShipment);\n    const redirect = useRedirect(shipment);\n    const networkErrorMessage = useSelector<AppRootStateType, string>(state => state.recovery.error);\n    const dispatch = useDispatch();\n    const {token} = useParams();\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            passwordRepeat: ''\n        },\n        onSubmit: values => {\n            dispatch(resetPasswordTC(values.passwordRepeat, token))\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 2) {\n                errors.password = 'Too Short!';\n            } else if (values.password.length > 10) {\n                errors.password = 'Max 10 chars';\n            } else if (values.password !== values.passwordRepeat) {\n                errors.password = \"The entered values do not match.\"\n            }\n            return errors;\n        },\n    })\n\n    if (redirect) {\n        return <Redirect to={\"/login\"}/>\n    }\n    if (shipment) {\n        return <div>You have successfully restored your password.</div>\n    }\n    return (\n        <div className={s.formWrapper}>\n            {appStatus === \"loading\" ? <Preloader/> : \"\"}\n            <h1>Password recovery page</h1>\n            <p>Please enter your new password.</p>\n            <form onSubmit={formik.handleSubmit}>\n                <InputText name={\"password\"} value={formik.values.password} onChange={formik.handleChange}\n                           actionEnter={() => {\n                           }} type={\"text\"}/>\n                <InputText name={\"passwordRepeat\"} value={formik.values.passwordRepeat} onChange={formik.handleChange}\n                           actionEnter={() => {\n                           }} type={\"password\"}/>\n                {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                <Button value={\"send\"} action={formik.handleSubmit} type={\"submit\"} disabled={appStatus === \"loading\"}\n                        mode={appStatus === \"loading\" ? \"red\" : null}/>\n            </form>\n            <span>{networkErrorMessage}</span>\n        </div>\n    );\n}\n\nexport type FormikErrorType = {\n    password?: string\n}\n","import React from \"react\";\nimport {NavLink, useParams} from \"react-router-dom\";\nimport s from \"./Header.module.scss\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logoutTC} from \"../../features/Login/auth-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Preloader} from \"../Preloader/Preloader\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\nimport {CardType} from \"../../api/api\";\n\nexport const Header = () => {\n\n    const dispatch = useDispatch()\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const cards = useSelector<AppRootStateType,Array<CardType>>(state => state.cards.cards)\n\n    const logout = () => {\n        dispatch(logoutTC())\n    }\n\n    return (\n        <>\n            {appStatus === 'loading' && <Preloader/>}\n            <header className={s.header}>\n                <NavLink className={s.logo}  to=\"/\" activeClassName={\"\"}>\n                <div className={s.logo}>SmartCards</div>\n                </NavLink>\n                <nav>\n                    <ul className={s.navList}>\n                        <NavLink className={s.navLink} to=\"/main\" activeClassName={s.navLinkActive}>\n                            <li className={s.linkItem}> Main</li>\n                        </NavLink>\n                        <NavLink className={s.navLink} to=\"/signUp\" activeClassName={s.navLinkActive}>\n                            <li className={s.linkItem}> Signup</li>\n                        </NavLink>\n                        {cards.length !== 0 && <NavLink className={s.navLink} to='/cards' activeClassName={s.navLinkActive}>\n\t\t\t\t\t\t  <li className={s.linkItem}>Cards</li>\n\t\t\t\t\t\t</NavLink>}\n                        <NavLink className={s.navLink} to=\"/packs\" activeClassName={s.navLinkActive}>\n                            <li className={s.linkItem}>Packs</li>\n                        </NavLink>\n                    </ul>\n                </nav>\n                <div>\n                    {isLogged ?  <span className={s.login} onClick={logout}> Logout</span> : null}\n                    {!isLogged\n                        ? <NavLink className={s.login} to=\"login\" activeClassName={\"\"}>\n                            <span> LogIn</span>\n                        </NavLink>\n                        : null}\n                </div>\n            </header>\n        </>);\n}","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {CardsAPI, CardType, PostCardParamsType} from \"../../api/api\";\nimport {SetStatusApp, setStatusAppAC} from \"../../app/app-reducer\";\nimport {setCardPacksTotalCountAC, SetCardPacksTotalCountActionType, SetPageSize} from \"../Packs/Packs-reducer\";\nimport {Dispatch} from \"redux\";\n\nconst SET_CURRENT_CARD_PAGE = \"SET_CURRENT_CARD_PAGE\";\nconst SET_PACKS_TOTAL_COUNT = \"SET_PACKS_TOTAL_COUNT\";\n\nconst initialState: InitialStateType = {\n    cards: [],\n    pageSize: 5,\n    totalCardsCount: 0,\n    currentPage: 1,\n    currentPackID: \"\",\n    isFetching: false,\n    currentPackUserID: \"\"\n}\nexport type InitialStateType = {\n    cards: Array<CardType>\n    pageSize: number\n    totalCardsCount: number\n    currentPage: number\n    isFetching: boolean\n    currentPackID: string\n    currentPackUserID: string\n};\n\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SET_CARDS':\n            return {...state, cards:[ ...action.cards]}\n        case 'SET_CURRENT_PACK_ID':\n            return {...state, currentPackID: action.packID}\n        case SET_CURRENT_CARD_PAGE:\n            return {\n                ...state, currentPage: action.currentPage\n            }\n        case SET_PACKS_TOTAL_COUNT:\n            return {\n                ...state, totalCardsCount: action.count\n            }\n        case \"SET_CURRENT_PACK_USER_ID\":\n            return {...state, currentPackUserID: action.currentPackUserID}\n\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setCardsAC = (cards: Array<CardType>) => ({type: 'SET_CARDS', cards} as const)\nexport const setCurrentPackIdAC = (packID: string) => ({type: 'SET_CURRENT_PACK_ID', packID} as const)\nexport const setCurrentCardPageAC = (currentPage: number) => ({type: SET_CURRENT_CARD_PAGE, currentPage} as const)\nexport const setCurrentPackUserIdAC = (currentPackUserID: string) => ({type: 'SET_CURRENT_PACK_USER_ID', currentPackUserID} as const)\n\n\n//Thunk creators\nexport const getCardsTC = (cardsPack_id: string,currentPage?:number) => {\n    return (dispatch: Dispatch<any>) => {\n        dispatch(setStatusAppAC('loading'))\n        CardsAPI.getCards(cardsPack_id,\"\",currentPage)\n            .then((res) => {\n                dispatch(setCardsAC(res.data.cards))\n                dispatch(setCardPacksTotalCountAC(res.data.cardsTotalCount))\n                dispatch(setStatusAppAC('succeeded'))\n            })\n\n    }\n}\nexport const deleteCard = (cardID: string, packID: string) => {\n    return (dispatch: Dispatch<any>) => {\n        CardsAPI.deleteCard(cardID)\n            .then((res) => {\n                dispatch(getCardsTC(packID))\n            })\n    }\n}\nexport const createCard = (card: PostCardParamsType, packID: string) => {\n    return (dispatch: Dispatch<any>) => {\n        CardsAPI.postCard(card)\n            .then((res) => {\n                dispatch(getCardsTC(packID))\n            })\n    }\n}\n\n//types\ntype ActionsTypes =\n    | ReturnType<typeof setCardsAC>\n    | ReturnType<typeof setCurrentPackIdAC>\n    | SetCardPacksTotalCountActionType\n    | SetStatusApp\n    | ReturnType<typeof setCurrentCardPageAC>\n    | ReturnType<typeof setCurrentPackUserIdAC>\n    |SetPageSize\n\n\n\ntype ThunksDispatch = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport styles from \"./Pack.module.scss\"\nimport {PackType} from \"../../../api/api\";\nimport backgroundPack from \"../../../assets/img/backgroundPack.jpg\"\nimport {NavLink} from \"react-router-dom\";\nimport {setCurrentPackIdAC, setCurrentPackUserIdAC} from \"../../Cards/Cards-reducer\";\nimport {useDispatch} from \"react-redux\";\n\ntype PackPropsType = {\n    pack: PackType\n    openModalRemovePack: (packID: string) => void\n    myUserID: string\n}\n\nexport const Pack = (props: PackPropsType) => {\n    const dispatch = useDispatch()\n\n    const openModalRemovePack = () => {\n        props.openModalRemovePack(props.pack._id)\n    }\n\n\n    const changeCurrentPackID = (packID: string, userID: string) => {\n        dispatch(setCurrentPackIdAC(packID))\n        dispatch(setCurrentPackUserIdAC(userID))\n    }\n\n    return (\n        <div className={styles.packBlock} style={{backgroundImage: `url(${backgroundPack})`}}>\n            <h3 className={styles.packTitle}>{props.pack.name.slice(0,14)}</h3>\n            {props.pack.cardsCount === 0 ? <span style={{color:\"orange\",cursor:\"default\"}} className={styles.count}>Cards: {props.pack.cardsCount}</span> :\n                <NavLink aria-disabled={\"true\"} className={styles.count} to={`/cards/${props.pack._id}`}\n                         onClick={() => changeCurrentPackID(props.pack._id, props.pack.user_id)}>\n                    Cards: {props.pack.cardsCount}\n                </NavLink>\n            }\n            <div className={styles.author}>{props.pack.user_name}</div>\n            <button className={styles.start}>\n                <NavLink className={styles.link} to={`/learningProcess/${props.pack._id}`} onClick={() => changeCurrentPackID(props.pack._id, props.myUserID )}>\n                    Start Learn\n                </NavLink>\n            </button>\n            {props.myUserID === props.pack.user_id &&\n            <button className={styles.deleteButton} onClick={openModalRemovePack}>x</button>}\n\n        </div>\n    )\n}","import React, { useEffect, useRef, FC, ReactNode } from 'react';\nimport styles from \"./Modal.module.css\"\n\ninterface ModalProps {\n    title: string;\n    children: ReactNode;\n    onClose: () => void;\n    duration?: number;\n    showCloseBtn?: boolean;\n}\n\nexport const Modal: FC<ModalProps> = ({ title, children, onClose, duration = 300, showCloseBtn }) => {\n    const modal = useRef<HTMLDivElement>(null);\n    const modalBg = useRef<HTMLDivElement>(null);\n    const modalContent = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        document.body.style.overflow = 'hidden';\n        if(modal.current) {\n            modal.current.classList.add('disable-click');\n        }\n        if(modalBg.current) {\n            modalBg.current.style.transitionDuration = duration + 'ms';\n        }\n        if(modalContent.current) {\n            modalContent.current.style.transitionDuration = duration + 'ms';\n        }\n\n        setTimeout(() => {\n            if(modalBg.current) {\n                modalBg.current.style.opacity = 0.2 + '';\n            }\n            if(modalContent.current) {\n                modalContent.current.style.opacity = 1 + '';\n                modalContent.current.style.top = 0 + '';\n            }\n        }, 20);\n\n        setTimeout(() => {\n            if(modal.current) {\n                modal.current.classList.remove('disable-click');\n            }\n        }, duration + 20);\n\n        return () => {\n            document.body.style.overflow = 'visible';\n        }\n    }, [duration]);\n\n    const modalCloseHandler = () => {\n        if(modal.current) {\n            modal.current.classList.add('disable-click');\n        }\n        if(modalBg.current) {\n            modalBg.current.style.opacity = 0 + '';\n        }\n        if(modalContent.current) {\n            modalContent.current.style.opacity = 0 + '';\n            modalContent.current.style.top = '-100px';\n        }\n\n        setTimeout(() => {\n            if(modal.current) {\n                modal.current.classList.remove('disable-click');\n            }\n            onClose();\n        }, duration);\n    }\n\n    return(\n        <div className={styles.modal} ref={modal}>\n            <div className={styles.modal_bg} onClick={modalCloseHandler} ref={modalBg}></div>\n            <div className={styles.modal_inner} ref={modalContent}>\n                <div className={styles.modal_head}>\n                    <h2>{title}</h2>\n                    {showCloseBtn && <button className={styles.btn} onClick={modalCloseHandler}>&times;</button>}\n                </div>\n                <div className={styles.modal_body}>\n                    {children}\n                </div>\n                <div className={styles.modal_foot}>\n                    {/*<button  onClick={modalCloseHandler}>Close</button>*/}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, {useCallback, useState} from \"react\";\nimport styles from \"./Table.module.scss\"\nimport {PackType} from \"../../api/api\";\nimport {Pack} from \"../../features/Packs/Pack/Pack\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {InputText} from \"../InputText/InputText\";\nimport {Button} from \"../Button/Button\";\nimport {useFormik} from \"formik\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {createPackTC, removePackTC} from \"../../features/Packs/Packs-reducer\";\nimport {Modal} from \"../Modal/Modal\";\n\ntype TablePropsType = {\n    values: Array<PackType>\n\n}\ntype FormikErrorType = {\n    packName?: string\n}\n\nexport const TablePacks = (props: TablePropsType) => {\n    const [isModalAddPackOpened, setIsModalAddPackOpened] = useState(false)\n    const [isModalRemovePackOpened, setIsModalRemovePackOpened] = useState(false)\n    const [packID, setPackID] = useState(\"\")\n    const dispatch = useDispatch()\n    const myUserID = useSelector<AppRootStateType, string>(state => state.app.myUserID)\n\n    const formik = useFormik({\n        initialValues: {\n            packName: ''\n        },\n        onSubmit: values => {\n            dispatch(createPackTC(values.packName));\n            formik.resetForm();\n            setIsModalAddPackOpened(false)\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.packName) {\n                errors.packName = 'Required';\n            }\n\n            return errors;\n        },\n    })\n\n    const openModalRemovePack = useCallback((packID: string) => {\n        setIsModalRemovePackOpened(true)\n        setPackID(packID)\n    }, [])\n\n    const removePack = useCallback(() => {\n        dispatch(removePackTC(packID))\n        setIsModalRemovePackOpened(false)\n    }, [packID])\n\n    return (\n        <div className={styles.tablePacksBlock}>\n            <div className={styles.tablePackContainer}>\n                <div className={styles.packs}>\n                    {props.values.map(p => <Pack myUserID={myUserID} pack={p} key={p._id} openModalRemovePack={openModalRemovePack}/>)}\n                </div>\n            </div>\n            <div className={styles.addBtn}>\n                <Button value={'Add new pack'} action={() => setIsModalAddPackOpened(true)}/>\n            </div>\n\n            {isModalAddPackOpened &&\n            <Modal title={'Add pack'} onClose={() => {\n                setIsModalAddPackOpened(false)\n            }} duration={600} showCloseBtn>\n                <div className={styles.addPackBlock}>\n                    <form>\n                        <InputText placeholder={'pack name'}\n                                   type={'text'}\n                                   {...formik.getFieldProps('packName')}\n                        />\n                        {formik.errors.packName && <div className={styles.error}>{formik.errors.packName}</div>}\n                        <div className={styles.buttonBlock}>\n                            <Button disabled={false} type='submit' value='submit' action={formik.handleSubmit}/>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n            }\n            {isModalRemovePackOpened &&\n            <Modal title={'Delete pack'} onClose={() => {\n                setIsModalRemovePackOpened(false)\n            }} duration={600} showCloseBtn>\n                <div className={styles.deletePackBlock}>\n                    <div className={styles.warnText}>This action cannon be undone.</div>\n                    <button className={styles.cancelButton} onClick={() => setIsModalRemovePackOpened(false)}>CANCEL</button>\n                    <button className={styles.deleteButton} onClick={removePack}>DELETE</button>\n                </div>\n            </Modal>\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport {useFormik} from \"formik\";\nimport s from \"./FindForms.module.scss\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getPacksTC, setCurrentPageAC,\n    setMinMaxValueAC,\n    setPacksNameAC,\n    setPageSizeAC,\n    setUpdatePacksAC\n} from \"../../features/Packs/Packs-reducer\";\nimport {Range} from \"rc-slider\";\nimport {AppRootStateType} from \"../../app/store\";\n\nexport const FindForm = () => {\n    const min = useSelector<AppRootStateType, number>(state => state.packs.min)\n    const max = useSelector<AppRootStateType, number>(state => state.packs.max)\n    const dispatch = useDispatch()\n    let onRangeValue = (value: number[]) => {\n        dispatch(setMinMaxValueAC(value))\n    }\n\n    let setUpdateNamePacks = (value: string) => {\n        dispatch(setUpdatePacksAC(value))\n    }\n\n    const resetPacks = () => {\n        dispatch(setMinMaxValueAC([0,20]))\n        dispatch(setPageSizeAC(\"6\"))\n        dispatch(setCurrentPageAC(1))\n        dispatch(getPacksTC())\n    }\n    const formik = useFormik({\n        initialValues: {\n            stringSearch: '',\n        },\n        onSubmit: values => {\n            dispatch(setPacksNameAC(values.stringSearch));\n            formik.resetForm();\n\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (values.stringSearch.length > 10) {\n                errors.stringSearch = 'Max 10 chars';\n            }\n            return errors;\n        },\n    })\n\n    return (\n        <div className={s.findFormWrapper}>\n            <form onSubmit={formik.handleSubmit} className={s.findForm}>\n                <input className={s.inputPacks} type=\"text\" name={\"stringSearch\"} value={formik.values.stringSearch}\n                       onChange={formik.handleChange} placeholder={\"Packs name\"}/>\n                {formik.errors.stringSearch ? <div style={{color: \"red\"}}>{formik.errors.stringSearch}</div> : null}\n                <div className={s.range}>\n                    <span className={s.line}>Number of cards in packs: {min} - {max}</span>\n                    <Range min={0} max={20} step={1} dots={false} defaultValue={[min,max]} onAfterChange={onRangeValue} />\n                    <h4>Sort by:</h4>\n                    <ul className={s.sortList}>\n                        <li className={s.sortItem}>\n                            Name<i className={s.arrowUp} onClick={() => {\n                            setUpdateNamePacks(\"0name\")\n                        }}></i>\n                            <i className={s.arrowDown} onClick={() => {\n                                setUpdateNamePacks(\"1name\")\n                            }}></i>\n                        </li>\n                        <li className={s.sortItem}>Date<i className={s.arrowUp} onClick={() => {\n                            setUpdateNamePacks(\"0update\")\n                        }}></i>\n                            <i className={s.arrowDown} onClick={() => {\n                                setUpdateNamePacks(\"1update\")\n                            }}></i></li>\n                    </ul>\n                </div>\n                <div className={s.btns}>\n                    <button className={s.btn} value={\"search\"} type={\"submit\"}>\n                        Apply\n                    </button>\n                    <button className={s.btn} value={\"search\"} onClick={resetPacks}>\n                        Reset\n                    </button>\n                </div>\n            </form>\n        </div>\n\n\n    );\n}\n\n\nexport type FormikErrorType = {\n    stringSearch?: string\n}\n","import React from 'react';\nimport {useFormik} from 'formik';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setPageSizeAC} from \"../../features/Packs/Packs-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport s from \"./Select.module.scss\"\n\ntype SelectPropsType ={\n    pageSize:string\n}\nexport const Select = (props:SelectPropsType) => {\n    const dispatch = useDispatch();\n    const pageSize = useSelector<AppRootStateType,string>(state => state.packs.pageSize)\n    const formik = useFormik({\n        initialValues: {\n            choosePageSize: pageSize,\n        },\n        onSubmit: values => {\n            dispatch(setPageSizeAC(values.choosePageSize));\n        },\n    })\n    return (\n            <form onSubmit={formik.handleSubmit} onChange={formik.submitForm} className={s.filters}>\n                <select\n                    name=\"choosePageSize\"\n                    value={props.pageSize}\n                    onChange={formik.handleChange}\n                    style={{display: 'block'}}\n                >\n                    <option value={\"6\"} label=\"6\"/>\n                    <option value={\"12\"} label=\"12\"/>\n                    <option value={\"24\"} label=\"24\"/>\n                </select>\n            </form>\n    );\n}","import React, {useState} from \"react\";\nimport s from \"./Paginator.module.scss\"\nimport {Select} from \"../Select/Select\";\n\ntype PaginatorPropsType = {\n    totalItemsCount: number\n    pageSize: string\n    currentPage: number\n    portionSize: number\n    onChangePage: (pageNumber: number) => void\n}\n\nexport const Paginator = ({totalItemsCount, pageSize, currentPage, onChangePage, portionSize}: PaginatorPropsType) => {\n    let pagesCount = Math.ceil(totalItemsCount / +pageSize);\n    let pages: number[] = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n    let lastPage = pages[pages.length - 1]\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionNumber = portionNumber * portionSize;\n    const setNextPage = () => {\n        onChangePage(currentPage + 1)\n        if (currentPage === rightPortionNumber) {\n            setPortionNumber(portionNumber + 1)\n        }\n    }\n    const setPrevPage = () => {\n        onChangePage(currentPage - 1)\n        if (currentPage === leftPortionPageNumber) {\n            setPortionNumber(portionNumber - 1)\n        }\n    }\n    const setLastPage = () => {\n        onChangePage(lastPage);\n        setPortionNumber(portionCount);\n    }\n    const setFirstPage = () => {\n        onChangePage(1);\n        setPortionNumber(1);\n    }\n    return (\n        <>\n            <div className={s.paginatorWrapper}>\n                <button className={`${s.btn} ${s.btnLeft}`}\n                        onClick={setPrevPage}\n                        disabled={currentPage === pages[0]}>\n                    {\"<\"}\n                </button>\n                <ul className={s.pagesList}>\n                    {portionNumber > 1 &&\n\t\t\t\t\t<li className={`${currentPage === 1 ? s.selectedPage : \"\"} ${s.pagesItems}`}\n\t\t\t\t\t\tonClick={setFirstPage}>{1}...</li>}\n                    {pages\n                        .filter(p => p >= leftPortionPageNumber && p <= rightPortionNumber)\n                        .map(p => {\n                            return <li key={p}\n                                       className={`${currentPage === p ? s.selectedPage : \"\"} ${s.pagesItems}`}\n                                       onClick={() => {\n                                           onChangePage(p)\n                                       }}>{p}</li>\n                        })}\n                    {portionNumber < portionCount &&<span>...</span>}\n                    {portionNumber < portionCount && \n\t\t\t\t\t<li className={`${currentPage === lastPage ? s.selectedPage : s.lastPage} ${s.pagesItems}`}\n\t\t\t\t\t\tonClick={setLastPage}>{lastPage}</li>}\n                </ul>\n                <button className={`${s.btn} ${s.btnRight}`}\n                        onClick={setNextPage}\n                        disabled={currentPage === pages[pages.length - 1]}>{\">\"}</button>\n                Size:<Select pageSize={pageSize}/>\n            </div>\n        </>\n    )\n}","import React, {useEffect} from \"react\";\nimport {TablePacks} from \"../../components/Table/Table\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport s from \"./Packs.module.scss\"\nimport commonStyles from \"../../common/styles/common.module.scss\"\nimport {getPacksTC, InitialStateType, setCurrentPageAC} from \"./Packs-reducer\";\nimport {FindForm} from \"../../components/FindForm/FindForm\";\nimport {Paginator} from \"../../components/Paginator/Paginator\";\nimport {Redirect} from \"react-router-dom\";\nimport 'rc-slider/assets/index.css';\nexport const Packs = () => {\n    const {findPackName,packs,min,max,update,totalPacksCount,currentPage,pageSize} = useSelector<AppRootStateType, InitialStateType>(state => state.packs)\n    const dispatch = useDispatch();\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const onChangeCurrentPage = (currentPage: number) => {dispatch(setCurrentPageAC(currentPage))}\n\n    useEffect(() => {\n        if (!isLoggedIn) return\n        dispatch(getPacksTC(findPackName + \"\", min, max, `${update}`, currentPage,\n            +pageSize));\n    }, [findPackName, currentPage, dispatch, pageSize, min, max, update])\n    if (!isLoggedIn) {\n\n        return <Redirect to={'/login'}/>\n    }\n    return (\n        <div className={commonStyles.container}>\n            <div className={s.content}>\n                <div className={s.stickyContainer}>\n                    <div className={s.settings}>\n                        <h3>Filters</h3>\n                        <FindForm/>\n\n                    </div>\n                </div>\n                <div className={s.packsWrapper}>\n                    <TablePacks values={packs}/>\n                    <div className={s.paginator}>\n                        <Paginator totalItemsCount={totalPacksCount}\n                                   pageSize={pageSize} currentPage={currentPage}\n                                   portionSize={7}\n                                   onChangePage={onChangeCurrentPage}/>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\n\nexport const Main = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n\n    if (!isLoggedIn) {\n\n       return <Redirect to={'/login'}/>\n    }\n    return (\n        <>\n            <h1>Welcome</h1>\n            <h4>Cards for your mind v 1.0 beta</h4>\n            <h4>Click Packs and start learning right now!</h4>\n        </>\n    );\n}\n\n","import React, {useState} from \"react\";\nimport styles from \"./Card.module.scss\"\nimport backgroundPack from \"../../../../assets/img/backgroundPack.jpg\"\nimport {useSelector} from \"react-redux\";\nimport {CardType} from \"../../../../api/api\";\nimport {AppRootStateType} from \"../../../../app/store\";\n\ntype PropsCardType = {\n    card: CardType\n    openModalRemoveCard: (cardID: string) => void\n}\n\nexport const Card = (props: PropsCardType) => {\n    const myUserID = useSelector<AppRootStateType, string>(state => state.app.myUserID)\n    const [flip, setFlip] = useState(false)\n    const openModalRemoveCard = () => {\n       props.openModalRemoveCard(props.card._id)\n    }\n\n\n    return (\n        <>\n\n            <div className={styles.box}>\n                {myUserID === props.card.user_id &&\n                <button className={styles.deleteButton} onClick={openModalRemoveCard}>x</button>}\n                <div className={`${styles.boxInner} ${flip ? styles.active : \"\"} `}>\n                    <div className={styles.boxFront} style={{backgroundImage: `url(${backgroundPack})`}}>\n                        <p className={styles.text}>{props.card.question}</p>\n                        <button className={styles.start} onClick={() => {\n                            setFlip(true)\n                        }}>Show answer\n                        </button>\n                    </div>\n                    <div className={styles.boxBack} style={{backgroundImage: `url(${backgroundPack})`}}>\n                        <p className={styles.text}>{props.card.answer}</p>\n                        <button className={styles.start} onClick={() => {\n                            setFlip(false)\n                        }}>Show question\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}","import React, {useState} from \"react\";\nimport {CardType} from \"../../../api/api\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {Card} from \"./Card/Card\";\nimport {InputText} from \"../../../components/InputText/InputText\";\nimport {Button} from \"../../../components/Button/Button\";\nimport {useFormik} from \"formik\";\nimport styles from \"./TableCards.module.scss\"\nimport {Modal} from \"../../../components/Modal/Modal\";\nimport {createCard, deleteCard} from \"../Cards-reducer\";\n\ntype TableCardsPropsType = {\n    values: Array<CardType>\n}\ntype FormikErrorType = {\n    question?: string\n    answer?: string\n}\n\nexport const TableCards = (props: TableCardsPropsType) => {\n    const [isModalAddCardOpened, setIsModalAddCardOpened] = useState(false)\n    const [isModalRemoveCardOpened, setIsModalRemoveCardOpened] = useState(false)\n    const [cardID, setCardID] = useState(\"\")\n    const myUserID = useSelector<AppRootStateType, string>(state => state.app.myUserID)\n    const currentPackUserID = useSelector<AppRootStateType, string>(state => state.cards.currentPackUserID)\n    const currentPackID = useSelector<AppRootStateType, string>(state => state.cards.currentPackID)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            cardsPack_id: currentPackID,\n            question: '',\n            answer: \"\"\n        },\n\n        onSubmit: values => {\n            dispatch(createCard(values, currentPackID));\n            setIsModalAddCardOpened(false)\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.question) {\n                errors.question = 'Required';\n            }\n            if (!values.answer) {\n                errors.answer = 'Required';\n            }\n            return errors;\n        },\n    })\n\n    const openModalRemoveCard = (cardID: string) => {\n        setCardID(cardID)\n        setIsModalRemoveCardOpened(true)\n    }\n    const removeCard = () => {\n        dispatch(deleteCard(cardID, currentPackID))\n        setIsModalRemoveCardOpened(false)\n    }\n\n    return (\n\n        <div className={styles.tableCardBlock}>\n            {isModalAddCardOpened &&\n            <Modal title={'Add card'} onClose={() => {\n                setIsModalAddCardOpened(false)\n            }} duration={600} showCloseBtn>\n                <div className={styles.addPackBlock}>\n                    <form>\n                        <InputText placeholder={'Question'}\n                                   type={'text-area'}\n                                   {...formik.getFieldProps('question')}\n                        />\n                        {formik.errors.question && <div className={styles.error}>{formik.errors.question}</div>}\n                        <InputText placeholder={'Answer'}\n                                   type={'text'}\n                                   {...formik.getFieldProps('answer')}\n                        />\n                        {formik.errors.answer && <div className={styles.error}>{formik.errors.answer}</div>}\n                        <div className={styles.buttonBlock}>\n                            <Button disabled={false} type='submit' value='submit' action={formik.handleSubmit}/>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n            }\n            {isModalRemoveCardOpened &&\n            <Modal title={'Delete card'} onClose={() => {\n                setIsModalRemoveCardOpened(false)\n            }} duration={600} showCloseBtn>\n                <div className={styles.deletePackBlock}>\n                    <div className={styles.warnText}>This action cannon be undone.</div>\n                    <button className={styles.cancelButton} onClick={() => setIsModalRemoveCardOpened(false)}>CANCEL\n                    </button>\n                    <button className={styles.deleteButton} onClick={removeCard}>DELETE</button>\n                </div>\n            </Modal>\n            }\n            <div className={styles.cards}>\n                {props.values.map(c => <Card key={c._id} card={c} openModalRemoveCard={openModalRemoveCard}/>)}\n            </div>\n            <div>\n                {myUserID === currentPackUserID &&\n                <Button value={'Add new card'} action={() => setIsModalAddCardOpened(true)}/>}\n            </div>\n\n        </div>\n    )\n}","import React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {getCardsTC, InitialStateType, setCurrentCardPageAC} from \"./Cards-reducer\";\nimport {TableCards} from \"./TableCards/TableCards\";\nimport {Paginator} from \"../../components/Paginator/Paginator\";\nimport {useParams, Redirect} from \"react-router-dom\"\nimport s from \"./Cards.module.scss\"\nexport const Cards = () => {\n    const {cards, totalCardsCount, pageSize, currentPage} = useSelector<AppRootStateType, InitialStateType>(state => state.cards)\n    const {packId} = useParams()\n    console.log(packId)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if(packId)\n        dispatch(getCardsTC(packId, currentPage))\n    }, [packId, currentPage])\n    if(!packId) return <Redirect to={\"/packs\"}/>\n    const onChangeCurrentPage = (currentPage: number) => {\n        dispatch(setCurrentCardPageAC(currentPage))\n    }\n    return (<div className={s.cardsWrapper}>\n        <TableCards values={cards}/>\n        <Paginator totalItemsCount={totalCardsCount} pageSize={pageSize.toString()} currentPage={currentPage}\n                   portionSize={pageSize} onChangePage={onChangeCurrentPage}/>\n    </div>)\n}","import {CardsAPI, CardType, PacksAPI, PostPackParamsType} from \"../../api/api\";\nimport {Dispatch} from \"redux\";\nimport {setStatusAppAC} from \"../../app/app-reducer\";\n\nconst SET_CURRENT_CARD = \"SET_CURRENT_CARD\";\nconst SET_CURRENT_CARD_RATE = \"SET_CURRENT_CARD_RATE\"\nconst initialState: InitialStateType = {\n    currentCard: null,\n    rate: 4\n}\n\nexport const learningProcessReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_CURRENT_CARD:\n            return {\n                ...state, currentCard: action.card\n            }\n        case SET_CURRENT_CARD_RATE:\n            return {\n                ...state, rate: action.rate\n            }\n        default:\n            return state\n    }\n}\n\nexport const setCurrentCardAC = (card: CardType | null) => ({type: SET_CURRENT_CARD, card} as const)\nexport const setCurrentCardRateAC = (rate: number) => ({type: SET_CURRENT_CARD_RATE, rate} as const)\n\nexport const setRateThunk = (currentCardId: string,rate:number) => {\n    return (dispatch: Dispatch<any>)  => {\n        dispatch(setStatusAppAC(\"loading\"))\n        CardsAPI.gradeCard(currentCardId,rate)\n            .then( (res) => {\n                debugger\n                dispatch(setCurrentCardRateAC(res.data.updatedGrade.grade))\n                dispatch(setStatusAppAC(\"succeeded\"))\n            })\n    }\n}\n\ntype ActionsTypes =\n    | ReturnType<typeof setCurrentCardAC>\n    | ReturnType<typeof setCurrentCardRateAC>\n\nexport type InitialStateType = {\n    currentCard: CardType | null,\n    rate: number\n};","import React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {getCardsTC} from \"../Cards/Cards-reducer\";\nimport {CardType} from \"../../api/api\";\nimport {setCurrentCardAC, setRateThunk} from \"./learningProcess-reducer\";\nimport {Card} from \"../Cards/TableCards/Card/Card\";\nimport s from \"./LearningProcess.module.scss\"\nimport styles from \"../../common/styles/common.module.scss\"\nimport Rating from \"react-rating\";\nimport empty from \"../../assets/img/empty.png\"\nimport full from \"../../assets/img/full.png\"\nimport {useParams} from \"react-router-dom\"\n\nexport const LearningProcess = () => {\n    const [isModalAddCardOpened, setIsModalAddCardOpened] = useState(false)\n    const [isModalRemoveCardOpened, setIsModalRemoveCardOpened] = useState(false)\n    const [cardID, setCardID] = useState(\"\")\n    const dispatch = useDispatch()\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\n    const currentPackID = useSelector<AppRootStateType, string>(state => state.cards.currentPackID)\n    const rate = useSelector<AppRootStateType, number>(state => state.learningProcess.rate)\n    const {packId} = useParams()\ndebugger\n    useEffect(() => {\n            dispatch(getCardsTC(packId))\n    }, [packId])\n\n    useEffect(() => {\n        let card = Math.floor(Math.random() * cards.length)\n        let currentCard = cards[card]\n        if (currentCard) {\n            dispatch(setCurrentCardAC(currentCard))\n\n        }\n    }, [cards])\n\n    const currentCard = useSelector<AppRootStateType, CardType | null>(state => state.learningProcess.currentCard)\n\n    const setCurrentCard = () => {\n        let card = Math.floor(Math.random() * cards.length)\n        dispatch(setCurrentCardAC(cards[card]))\n    }\n\n    const openModalRemoveCard = (cardID: string) => {\n        setCardID(cardID)\n        setIsModalRemoveCardOpened(true)\n    }\n    const setRate = (currentCardId:string|undefined,rate:number) =>{\n        if(currentCardId)dispatch(setRateThunk(currentCardId,rate))\n    }\n    return (\n        <div className={styles.container}>\n            <div className={s.learnWrapper}>\n                {currentCard && <Card card={currentCard} openModalRemoveCard={openModalRemoveCard}/> }\n                <Rating initialRating={rate} onChange={(value)=>{setRate(currentCard?._id,value)}}\n                        emptySymbol={<img src={empty} className=\"icon\"  alt={\"s\"} style={{width:\"25px\",height:\"25px\"}}/> }\n                        fullSymbol={<img src={full} className=\"icon\"  alt={\"s\"} style={{width:\"25px\",height:\"25px\"}}/>}\n\n                />\n                <button className={s.nextBtn} onClick={setCurrentCard}>Next question</button>\n            </div>\n        </div>\n    )\n}","import React, {useEffect} from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {Login} from \"../features/Login/Login\";\nimport {SignUp} from \"../features/SignUp/SignUp\";\nimport {Recovery} from \"../features/Recovery/Recovery\";\nimport {Initiate} from \"../features/Initiate/Initiate\";\nimport {Header} from \"../components/Header/Header\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {initializeAppTC} from \"./app-reducer\";\nimport {AppRootStateType} from \"./store\";\nimport {Preloader} from \"../components/Preloader/Preloader\";\nimport s from \"./App.module.scss\"\nimport {Packs} from \"../features/Packs/Packs\";\nimport {Main} from \"../features/Main/Main\";\nimport {Cards} from \"../features/Cards/Cards\";\nimport {LearningProcess} from \"../features/LearningProcess/LearningProcess\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [])\n\n    if (!isInitialized) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className={s.App}>\n            <Header/>\n            <Switch>\n                <Route exact path={[\"/Fridayapp\", \"/\"]} render={() => <Main/>}/>\n                <Route path={\"/packs\"} render={() => <Packs/>}/>\n                <Route path={\"/main\"} render={() => <Main/>}/>\n                <Route path={\"/learningProcess/:packId\"} render={() => <LearningProcess/>}/>\n                <Route path={\"/login\"} render={() => <Login/>}/>\n                <Route path={\"/signup\"} render={() => <SignUp/>}/>\n                <Route path={\"/recovery\"} render={() => <Recovery/>}/>\n                <Route path={\"/initiate/:token\"} render={() => <Initiate/>}/>\n                <Route path={\"/cards/:packId?\"} render={() => <Cards/>}/>\n                <Route path={\"/404\"} render={() => <h1>Error 404. Page not found.</h1>}/>\n                <Redirect from={\"*\"} to={\"/404\"}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, applyMiddleware} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from \"./app-reducer\";\nimport {recoveryReducer} from \"../features/Recovery/recovery-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {signUpReducer} from \"../features/SignUp/signup-reducer\";\nimport {packsReducer} from \"../features/Packs/Packs-reducer\";\nimport {cardsReducer} from \"../features/Cards/Cards-reducer\";\nimport {learningProcessReducer} from \"../features/LearningProcess/learningProcess-reducer\";\n\nconst rootReducer = combineReducers({\n    app: appReducer,\n    login: authReducer,\n    signup: signUpReducer,\n    recovery: recoveryReducer,\n    packs: packsReducer,\n    cards: cardsReducer,\n    learningProcess: learningProcessReducer\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer> ;\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <HashRouter><React.StrictMode>\n        <Provider store={store}>\n            <App  />\n        </Provider>\n    </React.StrictMode></HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findFormWrapper\":\"FindForms_findFormWrapper__3C1ID\",\"inputPacks\":\"FindForms_inputPacks__2eHBY\",\"btns\":\"FindForms_btns__3992W\",\"btn\":\"FindForms_btn__2PPEa\",\"range\":\"FindForms_range__1VNrO\",\"line\":\"FindForms_line__29aMx\",\"sortList\":\"FindForms_sortList__1kFCJ\",\"sortItem\":\"FindForms_sortItem__136ZS\",\"arrowUp\":\"FindForms_arrowUp__N65i-\",\"arrowDown\":\"FindForms_arrowDown__RoSSK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorWrapper\":\"Paginator_paginatorWrapper__2fEaE\",\"pagesList\":\"Paginator_pagesList__1Yf6n\",\"pagesItems\":\"Paginator_pagesItems__2UskD\",\"selectedPage\":\"Paginator_selectedPage__29BUS\",\"lastPage\":\"Paginator_lastPage__zPVOs\",\"btn\":\"Paginator_btn__39G3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablePacksBlock\":\"Table_tablePacksBlock__1dhxu\",\"tablePackContainer\":\"Table_tablePackContainer__12UK9\",\"packs\":\"Table_packs__rz98o\",\"addPackBlock\":\"Table_addPackBlock__3Xow-\",\"error\":\"Table_error__2vwi5\",\"buttonBlock\":\"Table_buttonBlock__3lMBP\",\"deletePackBlock\":\"Table_deletePackBlock__3fq5w\",\"warnText\":\"Table_warnText__3Oq9w\",\"cancelButton\":\"Table_cancelButton__2kkxM\",\"deleteButton\":\"Table_deleteButton__2MrCC\",\"scrollUp\":\"Table_scrollUp__2X4vx\",\"fa_fa_chevron_up\":\"Table_fa_fa_chevron_up__3ODN9\",\"addBtn\":\"Table_addBtn__3aEiL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"common_container__2_8eU\",\"formWrapper\":\"common_formWrapper__2Y5LB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Card_text__81SH-\",\"start\":\"Card_start__2wIqA\",\"deleteButton\":\"Card_deleteButton__1jvRD\",\"link\":\"Card_link__2VLY-\",\"box\":\"Card_box__1hx7b\",\"boxInner\":\"Card_boxInner__2NcHJ\",\"active\":\"Card_active__eCUHy\",\"boxFront\":\"Card_boxFront__3Z9w3\",\"boxBack\":\"Card_boxBack__15m2A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"TableCards_cards__8nx4-\",\"deletePackBlock\":\"TableCards_deletePackBlock__jb8CL\",\"warnText\":\"TableCards_warnText__37QW1\",\"cancelButton\":\"TableCards_cancelButton__22fKA\",\"deleteButton\":\"TableCards_deleteButton__3Y1DG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packBlock\":\"Pack_packBlock__23cxJ\",\"packTitle\":\"Pack_packTitle__23hoA\",\"author\":\"Pack_author__2fm1U\",\"start\":\"Pack_start__1Nqh4\",\"deleteButton\":\"Pack_deleteButton__2Ilmc\",\"count\":\"Pack_count__2rBnP\",\"link\":\"Pack_link__1tUrX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__2YKy3\",\"disable-click\":\"Modal_disable-click__Z46AH\",\"modal_bg\":\"Modal_modal_bg__17LYG\",\"modal_inner\":\"Modal_modal_inner__37Rgf\",\"modal_head\":\"Modal_modal_head__2_cdA\",\"btn\":\"Modal_btn__1ctwk\",\"modal_body\":\"Modal_modal_body__FSi-J\",\"modal_foot\":\"Modal_modal_foot__2NOjZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorLogin\":\"Login_errorLogin__2xNUa\",\"loginFormWrapper\":\"Login_loginFormWrapper__1uesW\",\"loginTitle\":\"Login_loginTitle__3z-Bz\",\"forgot\":\"Login_forgot__2gXNd\",\"btn\":\"Login_btn__1nnd-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerTitle\":\"SignUp_registerTitle__1j7sN\",\"error\":\"SignUp_error__1MTeK\",\"linkToLogin\":\"SignUp_linkToLogin__3V_xG\",\"registrationError\":\"SignUp_registrationError__3WYgz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Packs_settings__3GGZD\",\"content\":\"Packs_content__2NmAa\",\"paginator\":\"Packs_paginator__1FzAV\"};","module.exports = __webpack_public_path__ + \"static/media/backgroundPack.2d5de1ce.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3Uewk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1nhA4\",\"error\":\"Button_error__3zTj0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputCheckbox_input__2BraD\",\"checkbox\":\"InputCheckbox_checkbox__3Fr75\",\"active\":\"InputCheckbox_active__2rIEX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputText\":\"InputText_inputText__1ZhLQ\",\"error\":\"InputText_error__f2mwi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__1ACTc\",\"overlay\":\"Preloader_overlay__2uABP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learnWrapper\":\"LearningProcess_learnWrapper__3maNg\",\"nextBtn\":\"LearningProcess_nextBtn__1zG9N\"};","module.exports = __webpack_public_path__ + \"static/media/loader.c71eb0a3.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsWrapper\":\"Cards_cardsWrapper__1n0-M\"};","module.exports = __webpack_public_path__ + \"static/media/empty.b0fabf78.png\";","module.exports = __webpack_public_path__ + \"static/media/full.c73cda1e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__MvSEZ\",\"logo\":\"Header_logo__1sN1y\",\"navList\":\"Header_navList__SRaEo\",\"navLink\":\"Header_navLink__2CSW2\",\"navLinkActive\":\"Header_navLinkActive__eXWXZ\",\"linkItem\":\"Header_linkItem__1zaZK\",\"login\":\"Header_login__2Q-g_\"};"],"sourceRoot":""}