{"version":3,"sources":["components/Paginator/Paginator.module.scss","components/Header/Header.module.scss","app/App.module.scss","components/Table/Table.module.scss","features/SignUp/SignUp.module.scss","components/Button/Button.module.scss","components/InputCheckbox/InputCheckbox.module.scss","components/InputText/InputText.module.scss","components/FindForm/FindForms.module.scss","features/Login/Login.module.scss","components/Preloader/Preloader.module.scss","assets/img/loader.gif","features/Packs/Pack/Pack.module.css","features/Packs/Packs.module.scss","components/Sort/Sort.module.scss","features/Packs/Packs-reducer.ts","features/Profile/Profile.tsx","api/api.ts","app/app-reducer.ts","features/Login/auth-reducer.ts","components/InputText/InputText.tsx","components/Button/Button.tsx","components/Preloader/Preloader.tsx","components/InputCheckbox/InputCheckbox.tsx","features/Login/Login.tsx","features/SignUp/signup-reducer.ts","features/SignUp/SignUp.tsx","features/Recovery/recovery-reducer.ts","utils/customHooks.ts","features/Recovery/Recovery.tsx","features/Initiate/Initiate.tsx","components/Header/Header.tsx","features/Packs/Pack/Pack.tsx","components/Table/Table.tsx","components/FindForm/FindForm.tsx","components/Sort/Sort.tsx","components/Paginator/Paginator.tsx","components/Select/Select.tsx","features/Packs/Packs.tsx","app/App.tsx","serviceWorker.ts","features/Cards/Cards-reducer.ts","app/store.ts","index.tsx"],"names":["module","exports","SortType","Profile","useSelector","state","login","isLoggedIn","to","instance","axios","create","baseURL","withCredentials","authAPI","email","post","password","resetPasswordToken","data","delete","PacksAPI","packName","min","max","sortPacks","page","pageCount","get","cardsPack","packID","initialState","isInitialized","status","error","myUserID","setStatusAppAC","type","setMyUserIdAC","id","setIsLoggedAC","value","setLoginErrorAC","InputText","props","className","s","inputText","onChange","onKeyPress","e","key","actionEnter","name","placeholder","Button","mode","btn","onClick","action","disabled","Preloader","wrapper","src","preloader","alt","InputCheckBox","checkbox","checked","active","input","changeStatus","Login","dispatch","useDispatch","isLogged","errorLogin","appStatus","app","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","statusText","_id","catch","response","setTimeout","finally","formWrapper","handleSubmit","handleChange","style","color","styles","activeClassName","isRegistered","registrationError","setRegistrationErrorAC","SignUp","signup","getFieldProps","linkToLogin","isShipment","setIsShipment","shipment","showError","useRedirect","useState","redirect","makeRedirect","useEffect","timeoutId","clearTimeout","Recovery","networkErrorMessage","recovery","a","resetForm","Initiate","token","useParams","passwordRepeat","newPassword","resetPasswordTC","Header","header","navList","navLink","linkItem","Pack","packBlock","pack","user_name","href","user_id","removePack","packs","pageSize","totalPacksCount","currentPage","isFetching","findPackName","update","new","getPacksTC","cardPacks","count","cardPacksTotalCount","TablePacks","newPack","createPackTC","removePackTC","tablePacksBlock","tablePackContainer","map","p","addPackBlock","buttonBlock","FindForm","stringSearch","findFormWrapper","findForm","Sort","setValue","setUpdatePacks","setUpdatePacksAC","range","step","dots","defaultValue","setMinMaxValueAC","pushable","old","Paginator","totalItemsCount","onChangePage","portionSize","pagesCount","Math","ceil","pages","i","push","lastPage","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionNumber","paginatorWrapper","btnLeft","pagesList","selectedPage","pagesItems","filter","btnRight","Select","choosePageSize","submitForm","display","label","Packs","settings","setCurrentPageAC","App","err","exact","path","render","from","Boolean","window","location","hostname","match","cards","totalCardsCount","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7a70229a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorWrapper\":\"Paginator_paginatorWrapper__2fEaE\",\"pagesList\":\"Paginator_pagesList__1Yf6n\",\"pagesItems\":\"Paginator_pagesItems__2UskD\",\"selectedPage\":\"Paginator_selectedPage__29BUS\",\"lastPage\":\"Paginator_lastPage__zPVOs\",\"btn\":\"Paginator_btn__39G3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__MvSEZ\",\"navList\":\"Header_navList__SRaEo\",\"navLink\":\"Header_navLink__2CSW2\",\"linkItem\":\"Header_linkItem__1zaZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3Uewk\",\"container\":\"App_container__lEsUy\",\"formWrapper\":\"App_formWrapper__2fr31\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablePackContainer\":\"Table_tablePackContainer__12UK9\",\"packs\":\"Table_packs__rz98o\",\"addPackBlock\":\"Table_addPackBlock__3Xow-\",\"error\":\"Table_error__2vwi5\",\"buttonBlock\":\"Table_buttonBlock__3lMBP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"SignUp_error__1MTeK\",\"linkToLogin\":\"SignUp_linkToLogin__3V_xG\",\"registrationError\":\"SignUp_registrationError__3WYgz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1nhA4\",\"error\":\"Button_error__3zTj0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputCheckbox_input__2BraD\",\"checkbox\":\"InputCheckbox_checkbox__3Fr75\",\"active\":\"InputCheckbox_active__2rIEX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputText\":\"InputText_inputText__1ZhLQ\",\"error\":\"InputText_error__f2mwi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findFormWrapper\":\"FindForms_findFormWrapper__3C1ID\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorLogin\":\"Login_errorLogin__2xNUa\",\"loginFormWrapper\":\"Login_loginFormWrapper__1uesW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__1ACTc\"};","module.exports = __webpack_public_path__ + \"static/media/loader.e46d3467.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packBlock\":\"Pack_packBlock__3DQRc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Packs_settings__3GGZD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"Sort_range__HlhLQ\"};","import {PacksAPI, PackType, PostPackParamsType} from \"../../api/api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {SetStatusApp, setStatusAppAC} from \"../../app/app-reducer\";\n\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_PACKS_TOTAL_COUNT = \"SET_PACKS_TOTAL_COUNT\";\nconst SET_PACKS_NAME = \"SET_PACKS_NAME\";\nconst SET_PAGE_SIZE = \"SET_PAGE_SIZE\";\nconst SET_MIN_MAX_VALUE = \"SET_MIN_MAX_VALUE\";\nconst SET_UPDATE_PACKS = \"SET_UPDATE_PACKS\";\n\nexport enum SortType {\n    new = 0,\n    old = 1\n}\n\n\nconst initialState: InitialStateType = {\n    packs: [ ],\n    pageSize: \"5\",\n    totalPacksCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    findPackName: \"\",\n    min: 0,\n    max: 20,\n    update: SortType.new\n\n}\n\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_CURRENT_PAGE:\n            return {\n                ...state, currentPage: action.currentPage\n            }\n        case SET_PACKS_TOTAL_COUNT:\n            return {\n                ...state, totalPacksCount: action.count\n            }\n        case SET_PACKS_NAME:\n            return {...state, findPackName: action.packName}\n        case SET_PAGE_SIZE:\n            return {\n                ...state, pageSize: action.pageSize\n            }\n        case  SET_MIN_MAX_VALUE:\n            return {\n                ...state, min: action.value[0], max: action.value[1]\n            }\n        case SET_UPDATE_PACKS:\n            return {\n                ...state, update:action.value\n            }\n        case \"SET-PACKS\":\n            return {...state, packs: [...action.packs]}\n        case \"REMOVE-PACK\":\n            return {...state, packs: state.packs.filter(i => i._id !== action.packID)}\n        case \"CREATE-PACK\":\n            return {...state, packs: [action.newPack, ...state.packs]}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setCardPacksTotalCountAC = (count: number) => ({type: SET_PACKS_TOTAL_COUNT, count} as const)\nexport const setPacksNameAC = (packName: string) => ({type: SET_PACKS_NAME, packName} as const)\nexport const setPageSizeAC = (pageSize: string) => ({type: SET_PAGE_SIZE, pageSize} as const)\nexport const setMinMaxValueAC = (value: Array<number>) => ({type: SET_MIN_MAX_VALUE, value} as const)\nexport const setUpdatePacksAC = (value: SortType) => ({type: SET_UPDATE_PACKS, value} as const)\nexport const setCurrentPageAC = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\nexport const setPacksAC = (packs: Array<PackType>) => ({type: 'SET-PACKS', packs} as const)\nexport const removePackAC = (packID: string) => ({type: 'REMOVE-PACK', packID} as const)\nexport const createPackAC = (newPack: PackType) => ({type: 'CREATE-PACK', newPack} as const)\n\n//Thunk creators\nexport const getPacksTC = (packName?:string,min?: number, max?: number, sortPacks?: string,page?: number, pageCount?: number,  user_id?: string,) => {\n    return (dispatch: Dispatch<ActionsTypes>) => {\n        dispatch(setStatusAppAC(\"loading\"))\n        PacksAPI.getPacks(packName, min,max,sortPacks,page,pageCount,)\n            .then((res) => {\n                dispatch(setPacksAC(res.data.cardPacks))\n                dispatch(setCardPacksTotalCountAC(res.data.cardPacksTotalCount))\n                dispatch(setStatusAppAC(\"succeeded\"))\n            })\n    }\n}\nexport const removePackTC = (packID: string) => {\n    return (dispatch: Dispatch<any>) => {\n        dispatch(setStatusAppAC(\"loading\"))\n        PacksAPI.deletePack(packID)\n            .then((res) => {\n                dispatch(getPacksTC())\n                dispatch(setStatusAppAC(\"succeeded\"))\n            })\n    }\n}\nexport const createPackTC = (packName: string) => {\n    const newPack: PostPackParamsType = {name: packName}\n    return (dispatch: Dispatch<any>)  => {\n        dispatch(setStatusAppAC(\"loading\"))\n        PacksAPI.postPack(newPack)\n            .then( (res) => {\n                dispatch(getPacksTC())\n                dispatch(setStatusAppAC(\"succeeded\"))\n            })\n    }\n}\n\n//types\ntype ActionsTypes =\n    | ReturnType<typeof setCurrentPageAC>\n    | ReturnType<typeof setPacksAC>\n    | ReturnType<typeof removePackAC>\n    | ReturnType<typeof createPackAC>\n    | ReturnType<typeof setCardPacksTotalCountAC>\n    | ReturnType<typeof setPacksNameAC>\n    | ReturnType<typeof setPageSizeAC>\n    | ReturnType<typeof setMinMaxValueAC>\n    | ReturnType<typeof setUpdatePacksAC>\n    | SetStatusApp\n\ntype ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype InitialStateType = {\n    packs: Array<PackType>\n    pageSize: any\n    totalPacksCount: number\n    currentPage: number\n    isFetching: boolean\n    findPackName: string\n    min: number\n    max: number\n    update: SortType\n}\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\n\nexport const Profile = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n\n    if (!isLoggedIn) {\n\n       return <Redirect to={'/login'}/>\n    }\n    return (\n        <>\n            <h1>Profile Page</h1>\n        </>\n    );\n}\n\n","import axios from \"axios\";\nimport {LoginParamsType} from \"../features/Login/auth-reducer\";\n\nconst settings = {\n    withCredentials: true\n}\n\nconst instance = axios.create({\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\n    ...settings\n})\n\nexport const authAPI = {\n    forgotPassword(email: string) {\n        return instance.post<ForgotPasswordResponseType>(\"/auth/forgot\", {\n            email,\n            \"from\": \"test-front-admin <ai73a@yandex.by>\",\n            \"message\": \"<div style= 'background-color: #b8b8b8; padding: 15px'> \" +\n                \"password recovery link: <a href='https://ad1n1993.github.io/Fridayapp/#/initiate/$token$'> \" +\n                \"Click the link to restore access to your account \" +\n                \"</a>\" +\n                \"</div>\"\n        })\n    },\n    setNewPassword(password: string, resetPasswordToken: string) {\n        return instance.post<{ info: string }>(\"/auth/set-new-password\", {password, resetPasswordToken})\n    },\n    login(data: LoginParamsType) {\n        return instance.post(`/auth/login`, data)\n    },\n    logout() {\n        return instance.delete(\"/auth/me\")\n    },\n    registered(data: RegistrationParamsType) {\n        return  instance.post<RegistrationResponseType>('/auth/register', data)\n    },\n    me() {\n        return instance.post('auth/me')\n    }\n}\nexport const PacksAPI = {\n    getPacks(packName:string=\"\",min: number = 0, max: number = 20, sortPacks: string = '0update',page: number = 1, pageCount: number = 5,  user_id?: string,) {debugger\n        return instance.get<GetPacksResponseType>(\n\n            `/cards/pack?packName=${packName}&min=${min}&max=${max}&sortPacks=${sortPacks}updated&page=${page}&pageCount=${pageCount}`\n        )\n    },\n    postPack(cardsPack: PostPackParamsType) {\n        return instance.post('/cards/pack', {cardsPack: cardsPack})\n    },\n    deletePack(packID: string) {\n        return instance.delete(`/cards/pack?id=${packID}`)\n    },\n    putPack(cardsPack: PutPackParamsType) {\n        return instance.put('/cards/pack', cardsPack)\n    }\n}\nexport const CardsAPI = {\n    getCards(cardsPack_id: string, min: number = 1, max: number = 4, page: number = 1, pageCount: number = 7) {\n        return instance.get<GetCardsResponseType>('/cards/card?' + cardsPack_id)\n    },\n    postCard(card: PostCardParamsType) {\n        return instance.post('cards/card', card)\n    },\n    deleteCard(id: string) {\n        return instance.delete('cards/card?' + id)\n    },\n    putCard(card: PutCardParamsType) {\n        return instance.put('cards/card', card)\n    }\n}\n\n\n//types\nexport type RegistrationParamsType = {\n    email: string,\n    password: string\n}\nexport type  ForgotPasswordResponseType = {\n    \"info\": string,\n    \"success\": boolean,\n    \"answer\": boolean,\n    \"html\": boolean\n}\nexport type RegistrationResponseType = {\n    addedUser: {\n        created: string\n        email: string\n        isAdmin: boolean\n        name: string\n        publicCardPacksCount: number\n        rememberMe: boolean\n        updated: string\n        verified: boolean\n        __v: number\n        _id: string\n    }\n}\nexport type GetPacksResponseType = {\n    cardPacks:Array<PackType>\n    page: number\n    pageCount: number\n    cardPacksTotalCount: number\n    minCardsCount: number\n    maxCardsCount: number\n    token: string\n    tokenDeathTime: number\n}\nexport type GetCardsResponseType = {\n    cards: Array<CardType>\n    page: number\n    pageCount: number\n    cardsTotalCount: number\n    minGrade: number\n    maxGrade: number\n    token: string\n    tokenDeathTime: number\n}\nexport type PackType = {\n    _id: string\n    user_id: string\n    user_name: string\n    private: boolean\n    name: string\n    path: string\n    grade: number\n    shots: number\n    cardsCount: number\n    type: string\n    rating: number\n    created: string\n    updated: string\n    more_id: string\n    __v: number\n}\nexport type CardType = {\n    _id: string\n    cardsPack_id: string\n    user_id: string\n    answer: string\n    question: string\n    grade: number\n    shots: number\n    questionImg: string\n    comments: string\n    type: string\n    rating: number\n    more_id: string\n    created: string\n    updated: string\n    __v: number\n}\nexport type PostPackParamsType = {\n    name: string\n    path?: string\n    grade?: number\n    shots?: number\n    rating?: number\n    deckCover?: string\n    private?: boolean\n    type?: string\n}\nexport type PutPackParamsType = {\n    _id: string\n    name?: string\n}\nexport type PostCardParamsType = {\n    cardsPack_id: string\n    question?: string\n    answer?: string\n    grade?: 0 | 1 | 2 | 3 | 4 | 5\n    shots?: number\n    rating?: number\n    answerImg?: string\n    questionImg?: string\n    questionVideo?: string\n    answerVideo?: string\n    type?: string\n}\nexport type PutCardParamsType = {\n    _id: string\n    question?: string\n    comments?: string\n}\n\n","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"./store\";\nimport {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\nimport {SetIsLoggedType, setIsLoggedAC} from \"../features/Login/auth-reducer\";\n\nconst initialState: InitialStateType = {\n    isInitialized: false,\n    status: \"idle\",\n    error: null,\n    myUserID: \"\",\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'APP_SET_INITIALIZED':\n            return {...state, isInitialized: action.isInitialized}\n        case \"SET_STATUS_APP\":\n            return {...state, status: action.status}\n        case \"SET_MY_USER_ID\":\n            return {...state, myUserID: action.id}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP_SET_INITIALIZED', isInitialized} as const)\nexport const setStatusAppAC = (status: RequestStatusType) => ({type: 'SET_STATUS_APP', status} as const)\nexport const setAppErrorAC = (error: string | null) => ({type: 'SET_APP_ERROR', error} as const)\nexport const setMyUserIdAC = (id: string) => ({type: 'SET_MY_USER_ID', id} as const)\n\n//Thunk creators\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setStatusAppAC('loading'))\n    authAPI.me()\n        .then((res) => {\n            dispatch(setStatusAppAC('succeeded'))\n            dispatch(setIsLoggedAC(true));\n            dispatch(setMyUserIdAC(res.data._id))\n        })\n        .catch((err) => {})\n        .finally(() => {\n            dispatch(setIsInitializedAC(true))\n            dispatch(setStatusAppAC('succeeded'))\n        })\n}\n\n\n//types\nexport type SetStatusApp = ReturnType<typeof setStatusAppAC >\nexport type SetUserId = ReturnType<typeof setMyUserIdAC >\ntype ActionsTypes =\n    | ReturnType<typeof setIsInitializedAC>\n    | SetStatusApp\n    | ReturnType<typeof setAppErrorAC>\n    | SetUserId\n    | SetIsLoggedType\n\nexport type ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype InitialStateType = {\n    isInitialized: boolean\n    status: RequestStatusType\n    error: string | null,\n    myUserID: string\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\n\n\n\n\n\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../../api/api\";\nimport {setMyUserIdAC, setStatusAppAC, SetUserId} from \"../../app/app-reducer\";\n\n\nconst initialState = {\n    isLoggedIn: false,\n    error: '',\n}\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case \"SET_IS_LOGGED\":\n            return {...state, isLoggedIn: action.value}\n        case \"SET_LOGIN_ERROR\":\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsLoggedAC = (value: boolean) =>\n    ({type: \"SET_IS_LOGGED\", value} as const)\n\nexport const setLoginErrorAC = (error: string) =>\n    ({type: \"SET_LOGIN_ERROR\", error} as const)\n\n\n//Thunk creators\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setStatusAppAC('loading'))\n    authAPI.login(data)\n        .then((res) => {\n            if (res.statusText === \"OK\") {\n                dispatch(setIsLoggedAC(true))\n                dispatch(setMyUserIdAC(res.data._id))\n            }\n        })\n        .catch((e) => {\n            const error = e.response.data.error\n            dispatch(setLoginErrorAC(error))\n            setTimeout(() => dispatch(setLoginErrorAC(\"\")), 5000);\n\n        })\n        .finally(() => {\n                dispatch(setStatusAppAC('succeeded'))\n            }\n        )\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsTypes>) => {\n    dispatch(setStatusAppAC('loading'))\n    authAPI.logout()\n        .then((res) => {\n            if (res.statusText === \"OK\") {\n                dispatch(setIsLoggedAC(false))\n                dispatch(setMyUserIdAC(res.data._id))\n            }\n        })\n        .finally(() => {\n            dispatch(setStatusAppAC('succeeded'))\n        })\n}\n\n//types\ntype InitialStateType = typeof initialState;\n\nexport type SetIsLoggedType = ReturnType<typeof setIsLoggedAC>\ntype ActionsTypes =\n    SetIsLoggedType |\n    ReturnType<typeof setLoginErrorAC> |\n    ReturnType<typeof setStatusAppAC> | SetUserId\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport s from \"./InputText.module.scss\"\n\ntype InputTextTypeProps = {\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\n    actionEnter?: () => void;\n    error?: boolean\n    name?:string\n    placeholder?:string\n    type:string\n\n}\n\nexport const InputText = (props: InputTextTypeProps) => {\n\n    const actionEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter' && props.actionEnter) {\n            props.actionEnter();\n        }\n\n    }\n    return (\n        <>\n            <input className={`${s.inputText} ${props.error && props.value !==\"\" ? s.error : \"\"}`}\n                   type={props.type}\n                   value={props.value}\n                   onChange={props.onChange}\n                   onKeyPress={actionEnter}\n                   name={props.name}\n                   placeholder={props.placeholder}\n            />\n        </>\n    );\n}","import React from \"react\";\nimport s from \"./Button.module.scss\"\n\ntype ButtonTypeProps = {\n    value: string\n    action: () => void\n    mode?: \"red\"|null\n    type?: \"button\" | \"submit\" | \"reset\" | undefined\n    disabled?: boolean\n}\n\nexport const Button = (props:ButtonTypeProps) =>{\n    return(\n        <button\n            className={props.mode === \"red\" ? `${s.btn}  ${s.error}`:  s.btn}\n            onClick={props.action}\n            type={props.type}\n            disabled={props.disabled}\n        >\n            {props.value}\n        </button>\n    );\n}","import React from \"react\";\nimport s from \"./Preloader.module.scss\"\nimport preloader from \"../../assets/img/loader.gif\"\n\nexport const Preloader = () => {\n    return(\n        <div className={s.wrapper}>\n            <img src={preloader} alt=\"loading...\"/>\n        </div>\n    );\n}","import React, {ChangeEvent} from \"react\";\nimport s from \"./InputCheckbox.module.scss\"\n\ntype inputCheckboxTypeProps = {\n    checked: boolean\n    changeStatus: (e: ChangeEvent<HTMLInputElement>) => void\n    value: string;\n    id?: number\n    name?:string\n}\n\nexport const InputCheckBox = (props: inputCheckboxTypeProps) => {\n\n    // const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n    //     let id = props.id || +e.currentTarget.id;\n    //     props.changeStatus(e.currentTarget.checked, id);\n    // }\n    return (\n        <>\n            <label className={`${s.checkbox} ${props.checked ? s.active : \"\"}`}>\n                <input className={s.input} type=\"checkbox\"  checked={props.checked} onChange={props.changeStatus} name={\"rememberMe\"}/>\n                <span>{props.value}</span>\n            </label>\n        </>\n    );\n}","import React from \"react\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport styles from \"./Login.module.scss\"\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {InputCheckBox} from \"../../components/InputCheckbox/InputCheckbox\";\nimport s from \"../../app/App.module.scss\"\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const errorLogin = useSelector<AppRootStateType, string>(state => state.login.error)\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n    type FormikErrorType = {\n        email?: string\n        password?: string\n        rememberMe?: boolean\n    }\n\n    const formik = useFormik({\n\n        initialValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n        },\n        validate: values => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 6) {\n                errors.password = 'Must be 6 characters or less';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        }\n    })\n\n    if (isLogged) {\n        return <Redirect to={\"/\"}/>\n    }\n\n    return (\n        <div className={s.formWrapper}>\n            <h1>Login Page</h1>\n            <form onSubmit={formik.handleSubmit} >\n                <InputText name={\"email\"} value={formik.values.email}\n                           onChange={formik.handleChange}\n                           placeholder={\"Email\"}\n                           actionEnter={() => {\n                           }} type={\"text\"}/>\n                {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                <InputText name={\"password\"} value={formik.values.password}\n                           onChange={formik.handleChange}\n                           placeholder={\"Password\"}\n                           actionEnter={() => {\n                           }} type={\"password\"}/>\n                {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                {errorLogin && <div className={styles.errorLogin}>{errorLogin}</div>}\n                {appStatus === 'loading' && <Preloader/>}\n                <InputCheckBox checked={formik.values.rememberMe} changeStatus={formik.handleChange}\n                               value={\"remember me\"} name={\"rememberMe\"}/><br/>\n                <Button value={\"send\"} action={formik.handleSubmit} type={\"submit\"}/>\n\n            </form>\n            <NavLink className={\"\"} to=\"recovery\" activeClassName={\"\"}>\n                <span className={\"\"}> Forgot password?</span>\n            </NavLink>\n        </div>\n    );\n}","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {authAPI, RegistrationParamsType} from \"../../api/api\";\nimport {setStatusAppAC} from \"../../app/app-reducer\";\nimport {Dispatch} from \"redux\";\n\nconst initialState: InitialStateType = {\n    isRegistered: false,\n    registrationError: null\n}\n\nexport const signUpReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SET-IS-REGISTERED':\n            return {...state, isRegistered: action.isRegistered}\n        case \"SET-REGISTRATION-ERROR\":\n            return {...state, registrationError: action.error}\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsRegisteredAC = (isRegistered: boolean) => ({type: 'SET-IS-REGISTERED', isRegistered} as const)\nexport const setRegistrationErrorAC = (error: null | string) => ({type: 'SET-REGISTRATION-ERROR', error} as const)\n\n\n//Thunk creators\nexport const registrationTC = (data: RegistrationParamsType) => {\n    return  (dispatch: Dispatch<ActionsTypes>) => {\n        dispatch(setStatusAppAC('loading'))\n        authAPI.registered(data)\n            .then( (res) => {\n                dispatch(setIsRegisteredAC(true))\n            })\n            .catch( (error) => {\n                dispatch(setRegistrationErrorAC(error.response.data.error))\n                setTimeout(() => dispatch(setRegistrationErrorAC(\"\")), 5000);\n            })\n            .finally( () => {\n                dispatch(setStatusAppAC('succeeded'))\n            })\n    }\n}\n\n//types\ntype ActionsTypes =\n    | ReturnType<typeof setIsRegisteredAC>\n    | ReturnType<typeof setStatusAppAC>\n    | ReturnType<typeof setRegistrationErrorAC>\n\n\ntype ThunksDispatch = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype InitialStateType = {\n    isRegistered: boolean\n    registrationError: null | string\n};\n\n\n\n\n\n\n\n","import React from \"react\";\nimport styles from \"./SignUp.module.scss\"\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {useFormik} from \"formik\";\nimport {Button} from \"../../components/Button/Button\";\nimport {registrationTC} from \"./signup-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {AppRootStateType} from \"../../app/store\";\nimport { Preloader } from \"../../components/Preloader/Preloader\";\nimport s from \"../../app/App.module.scss\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n}\n\nexport const SignUp = () => {\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.signup.isRegistered)\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const registrationError = useSelector<AppRootStateType, null | string>(state => state.signup.registrationError)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n        },\n        onSubmit: values => {\n            dispatch(registrationTC(values))\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 7) {\n                errors.password = 'Password must be at least 7 characters';\n            }\n            return errors;\n        },\n    })\n\n    if (isRegistered) {\n        return <Redirect to={'/login'}/>\n    }\n    if (appStatus === \"loading\") {\n        return <Preloader/>\n    }\n    return (\n        <div className={s.formWrapper}>\n            <h2>Registration</h2>\n            <form>\n                <InputText placeholder={'email'}\n                           type={'text'}\n                           {...formik.getFieldProps('email')}\n                />\n                {formik.errors.email && <div className={styles.error}>{formik.errors.email}</div>}\n                <InputText placeholder={'password'}\n                           type='password'\n                           {...formik.getFieldProps('password')}\n                />\n                {formik.errors.password && <div className={styles.error}>{formik.errors.password}</div>}\n                <Button disabled={false} type='submit' value='register' action={formik.handleSubmit}/>\n            </form>\n            <div className={styles.linkToLogin}>\n                <NavLink to='login'>\n                    <span>Login</span>\n                </NavLink>\n            </div>\n            {registrationError && <div className={styles.registrationError}>{registrationError}</div>}\n        </div>\n    );\n}","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {authAPI} from \"../../api/api\";\nimport {setStatusAppAC} from \"../../app/app-reducer\";\nimport {Dispatch} from \"redux\";\n\nconst RECOVERY_SET_SHIPMENT = \"RECOVERY_SET_SHIPMENT\";\nconst RECOVERY_SHOW_ERROR = \"RECOVERY_SHOW_ERROR\";\n\nconst initialState: InitialRecoveryStateType = {\n    error: \"\",\n    isShipment: false,\n}\n\nexport const recoveryReducer = (state: InitialRecoveryStateType = initialState, action: ActionsTypes): InitialRecoveryStateType => {\n    switch (action.type) {\n        case RECOVERY_SET_SHIPMENT:\n            return {\n                ...state, isShipment: action.shipment\n            }\n        case RECOVERY_SHOW_ERROR:\n            return {\n                ...state, error: action.error\n            }\n        default:\n            return {...state}\n    }\n}\n\n//Action creators\nconst setIsShipment = (shipment: boolean) => ({type: RECOVERY_SET_SHIPMENT, shipment} as const);\nconst showError = (error: string) => ({type: RECOVERY_SHOW_ERROR, error} as const);\n\n//Thunk creators\nexport const recoveryRequestTC = (email: string): ThunkType => {\n    return async (dispatch: Dispatch<ActionsTypes>) => {\n        dispatch(setStatusAppAC('loading'))\n        try {\n            await authAPI.forgotPassword(email);\n            dispatch(setIsShipment(true));\n            dispatch(setStatusAppAC('succeeded'))\n        } catch (error) {\n            dispatch(showError(error.response.data.error));\n            dispatch(setStatusAppAC('succeeded'))\n        }\n    }\n}\n\nexport const resetPasswordTC = (newPassword: string, token: string): ThunkType => {\n    return async (dispatch: Dispatch<ActionsTypes>) => {\n        dispatch(setStatusAppAC('loading'))\n        try {\n            await authAPI.setNewPassword(newPassword, token);\n            dispatch(setIsShipment(true))\n            dispatch(setStatusAppAC('succeeded'))\n        } catch (error) {\n            dispatch(showError(error.response.data.error));\n            setTimeout(() => dispatch(showError(\"\")), 5000);\n        }\n    }\n}\n\n//types\nexport type InitialRecoveryStateType = {\n    error: string\n    isShipment: boolean\n};\n\ntype ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype ActionsTypes =\n    | ReturnType<typeof setIsShipment>\n    | ReturnType<typeof showError>\n    | ReturnType<typeof setStatusAppAC>","import {useEffect, useState} from \"react\";\n\n\nexport const useRedirect = (shipment: boolean) => {\n    const [redirect, makeRedirect] = useState(false);\n    useEffect(() => {\n        const timeoutId = setTimeout(() => {\n            if (!shipment) return;\n            makeRedirect(true);\n        }, 5000);\n        return () => clearTimeout(timeoutId);\n    }, [shipment]);\n    return redirect;\n}","import React from \"react\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {recoveryRequestTC} from \"./recovery-reducer\";\nimport {Redirect} from 'react-router-dom';\nimport {AppRootStateType} from \"../../app/store\";\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {useRedirect} from \"../../utils/customHooks\";\nimport s from \"../../app/App.module.scss\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\n\nexport const Recovery = () => {\n    const networkErrorMessage = useSelector<AppRootStateType, string>(state => state.recovery.error);\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n    const shipment = useSelector<AppRootStateType, boolean>(state => state.recovery.isShipment);\n    const redirect = useRedirect(shipment);\n\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n        },\n        onSubmit: values => {\n            dispatch(recoveryRequestTC(values.email))\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n    })\n\n    if (redirect) {\n        return <Redirect to={\"/login\"}/>\n    }\n    if (shipment) {\n        return <div>Instructions for password recovery have been sent to your email address.</div>\n\n    }\n\n    return (\n        <div className={s.formWrapper}>\n            {appStatus === \"loading\" ? <Preloader/> : \"\"}\n            <h2>Forgot password?</h2>\n            <p>Please enter your email address.</p>\n            <form onSubmit={formik.handleSubmit}>\n                <InputText name={\"email\"} value={formik.values.email} onChange={formik.handleChange}\n                           actionEnter={() => {\n                           }} type={\"text\"}/>\n                {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                <p style={{color: \"red\"}}>{networkErrorMessage}</p>\n                <Button value={\"send\"} action={formik.handleSubmit} type={\"submit\"} disabled={appStatus === \"loading\"}\n                        mode={appStatus === \"loading\" ? \"red\" : null}/>\n            </form>\n        </div>\n    );\n}\n\nexport type FormikErrorType = {\n    email?: string\n}\n","import React from \"react\";\nimport {InputText} from \"../../components/InputText/InputText\";\nimport {Button} from \"../../components/Button/Button\";\nimport {useFormik} from \"formik\";\nimport {Redirect, useParams} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {resetPasswordTC} from \"../Recovery/recovery-reducer\";\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {useRedirect} from \"../../utils/customHooks\";\nimport s from \"../../app/App.module.scss\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\n\nexport const Initiate = () => {\n\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n    const shipment = useSelector<AppRootStateType, boolean>(state => state.recovery.isShipment);\n    const redirect = useRedirect(shipment);\n    const networkErrorMessage = useSelector<AppRootStateType, string>(state => state.recovery.error);\n    const dispatch = useDispatch();\n    const {token} = useParams();\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            passwordRepeat: ''\n        },\n        onSubmit: values => {\n            dispatch(resetPasswordTC(values.passwordRepeat, token))\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 2) {\n                errors.password = 'Too Short!';\n            } else if (values.password.length > 10) {\n                errors.password = 'Max 10 chars';\n            } else if (values.password !== values.passwordRepeat) {\n                errors.password = \"The entered values do not match.\"\n            }\n            return errors;\n        },\n    })\n\n    if (redirect) {\n        return <Redirect to={\"/login\"}/>\n    }\n    if (shipment) {\n        return <div>You have successfully restored your password.</div>\n    }\n    return (\n        <div className={s.formWrapper}>\n            {appStatus === \"loading\" ? <Preloader/> : \"\"}\n            <h1>Password recovery page</h1>\n            <p>Please enter your new password.</p>\n            <form onSubmit={formik.handleSubmit}>\n                <InputText name={\"password\"} value={formik.values.password} onChange={formik.handleChange}\n                           actionEnter={() => {\n                           }} type={\"text\"}/>\n                <InputText name={\"passwordRepeat\"} value={formik.values.passwordRepeat} onChange={formik.handleChange}\n                           actionEnter={() => {\n                           }} type={\"password\"}/>\n                {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                <Button value={\"send\"} action={formik.handleSubmit} type={\"submit\"} disabled={appStatus === \"loading\"}\n                        mode={appStatus === \"loading\" ? \"red\" : null}/>\n            </form>\n            <span>{networkErrorMessage}</span>\n        </div>\n    );\n}\n\nexport type FormikErrorType = {\n    password?: string\n}\n","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport s from \"./Header.module.scss\"\nimport {Button} from \"../Button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logoutTC} from \"../../features/Login/auth-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Preloader} from \"../Preloader/Preloader\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\nexport const Header = () => {\n\n    const dispatch = useDispatch()\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n    const logout = () => {\n        dispatch(logoutTC())\n    }\n\n    return (\n        <>\n            {appStatus === 'loading' && <Preloader/>}\n            <header className={s.header}>\n                <nav>\n                    <ul className={s.navList}>\n                        <NavLink className={s.navLink} to=\"/\" activeClassName={\"\"}>\n                            <li className={s.linkItem}> Profile</li>\n                        </NavLink>\n                        <NavLink className={s.navLink} to=\"/packs\" activeClassName={\"\"}>\n                            <li className={s.linkItem}> Packs</li>\n                        </NavLink>\n\n                        {!isLogged\n                            ? <NavLink className={s.navLink} to=\"login\" activeClassName={\"\"}>\n                                <li className={s.linkItem}> Login</li>\n                            </NavLink>\n                            : null}\n                        <NavLink className={s.navLink} to=\"signup\" activeClassName={\"\"}>\n                            <li className={s.linkItem}> Signup</li>\n                        </NavLink>\n                        <NavLink className={s.navLink} to=\"packs\" activeClassName={\"\"}>\n                            <li className={s.linkItem}>Packs</li>\n                        </NavLink>\n                        {isLogged ? <Button value={\"Log out\"} action={logout}/> : null}\n\n                    </ul>\n                </nav>\n            </header>\n        </>);\n}","import React from \"react\";\nimport styles from \"./Pack.module.css\"\nimport {PackType} from \"../../../api/api\";\n\ntype PackPropsType = {\n    pack: PackType\n    removePack: (packID: string) => void\n    myUserID: string\n}\n\nexport const Pack = (props: PackPropsType) => {\n\n    const removePack = () => {\n        props.removePack(props.pack._id)\n    }\n\n    return (\n        <div className={styles.packBlock}>\n            <h2>{props.pack.name}</h2>\n            <div>{props.pack.user_name}</div>\n            <div><a href=\"#\">cards</a></div>\n            <div>{props.pack.user_id}</div>\n            { props.myUserID === props.pack.user_id && <button onClick={removePack}>delete pack</button>}\n        </div>\n    )\n}","import React from \"react\";\nimport styles from \"./Table.module.scss\"\nimport {PackType} from \"../../api/api\";\nimport {Pack} from \"../../features/Packs/Pack/Pack\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {InputText} from \"../InputText/InputText\";\nimport {Button} from \"../Button/Button\";\nimport {useFormik} from \"formik\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {createPackTC, removePackTC} from \"../../features/Packs/Packs-reducer\";\n\ntype TablePropsType = {\n    values: Array<PackType>\n\n}\ntype FormikErrorType = {\n    packName?: string\n}\n\nexport const TablePacks = (props: TablePropsType) => {\n    const myUserID = useSelector<AppRootStateType, string>(state => state.app.myUserID)\n\n    const formik = useFormik({\n        initialValues: {\n            packName: ''\n        },\n        onSubmit: values => {\n            dispatch(createPackTC(values.packName));\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.packName) {\n                errors.packName = 'Required';\n            } else if (values.packName.length > 15) {\n                errors.packName = 'Name pack must be no more than 12 characters';\n            }\n            return errors;\n        },\n    })\n\n    const dispatch = useDispatch()\n\n    const removePack = (packID: string) => {\n        dispatch(removePackTC(packID))\n    }\n\n    return (\n        <div className={styles.tablePacksBlock}>\n            <div className={styles.tablePackContainer}>\n                <div className={styles.packs}>\n                    {props.values.map(p => <Pack myUserID={myUserID} pack={p} key={p._id} removePack={removePack}/>)}\n                </div>\n            </div>\n            <div className={styles.addPackBlock}>\n                <form>\n                    <InputText placeholder={'pack name'}\n                               type={'text'}\n                               {...formik.getFieldProps('packName')}\n                    />\n                    {formik.errors.packName && <div className={styles.error}>{formik.errors.packName}</div>}\n                    <div className={styles.buttonBlock}>\n                        <Button disabled={false} type='submit' value='add new pack' action={formik.handleSubmit}/>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {useFormik} from \"formik\";\nimport s from \"./FindForms.module.scss\"\nimport {InputText} from \"../InputText/InputText\";\nimport {Button} from \"../Button/Button\";\nimport {useDispatch} from \"react-redux\";\nimport {setPacksNameAC} from \"../../features/Packs/Packs-reducer\";\n\nexport const FindForm = () => {\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            stringSearch: '',\n        },\n        onSubmit: values => {\n            dispatch(setPacksNameAC(values.stringSearch));\n            formik.resetForm();\n\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (values.stringSearch.length < 2) {\n                errors.stringSearch = 'Too Short!';\n            } else if (values.stringSearch.length > 10) {\n                errors.stringSearch = 'Max 10 chars';\n            }\n            return errors;\n        },\n    })\n\n    return (\n        <div className={s.findFormWrapper}>\n            <form onSubmit={formik.handleSubmit} className={s.findForm}>\n\n                    <InputText name={\"stringSearch\"} value={formik.values.stringSearch} onChange={formik.handleChange}\n                               actionEnter={() => {\n                               }} type={\"text\"}/>\n                {formik.errors.stringSearch ? <div style={{color: \"red\"}}>{formik.errors.stringSearch}</div> : null}\n                <Button value={\"search\"} action={formik.handleSubmit} type={\"submit\"}/>\n            </form>\n        </div>\n    );\n}\n\nexport type FormikErrorType = {\n    stringSearch?: string\n}\n","import React, {useState} from \"react\";\nimport {Range} from 'rc-slider';\nimport s from \"./Sort.module.scss\"\nimport 'rc-slider/assets/index.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setMinMaxValueAC, setUpdatePacksAC, SortType} from \"../../features/Packs/Packs-reducer\";\n\nexport const Sort = () => {\n    const min = useSelector<AppRootStateType, number>(state => state.packs.min)\n    const max = useSelector<AppRootStateType, number>(state => state.packs.max)\n    const dispatch = useDispatch()\n    let [value, setValue] = useState<Array<number>>([min,max])\n    let onRangeValue = (value: number[]) => {\n        setValue(value)\n        dispatch(setMinMaxValueAC(value))\n    }\n    let setUpdatePacks = (value:SortType) =>{\n        dispatch(setUpdatePacksAC(value))\n    }\n    return (\n        <>\n            <div className={s.range}>\n                Number of cards: {value[0]} - {value[1]}\n                <Range min={0} max={20} step={1} dots={false} defaultValue={value} onChange={onRangeValue}\n                       pushable={true}/>\n                       <span onClick={()=>{setUpdatePacks(SortType.new)}}>show new packs first</span> --- <span onClick={()=>{setUpdatePacks(SortType.old)}}>show old packs first</span>\n            </div>\n        </>\n    );\n}\n\n","import React, {useState} from \"react\";\nimport s from \"./Paginator.module.scss\"\n\ntype PaginatorPropsType = {\n    totalItemsCount: number\n    pageSize: string\n    currentPage: number\n    portionSize: number\n    onChangePage: (pageNumber: number) => void\n}\n\nexport const Paginator = ({totalItemsCount, pageSize, currentPage, onChangePage, portionSize}: PaginatorPropsType) => {\n    let pagesCount = Math.ceil(totalItemsCount / +pageSize);\n    let pages: number[] = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n    let lastPage = pages[pages.length - 1]\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionNumber = portionNumber * portionSize;\n    const setNextPage = () => {\n        onChangePage(currentPage + 1)\n        if (currentPage === rightPortionNumber) {\n            setPortionNumber(portionNumber + 1)\n        }\n    }\n    const setPrevPage = () => {\n        onChangePage(currentPage - 1)\n        if (currentPage === leftPortionPageNumber) {\n            setPortionNumber(portionNumber - 1)\n        }\n    }\n    const setLastPage = () => {\n        onChangePage(lastPage);\n        setPortionNumber(portionCount);\n    }\n    const setFirstPage = () => {\n        onChangePage(1);\n        setPortionNumber(1);\n    }\n    return (\n        <>\n            <div className={s.paginatorWrapper}>\n                <button className={`${s.btn} ${s.btnLeft}`}\n                        onClick={setPrevPage}\n                        disabled={currentPage === pages[0]}>\n                    {\"<\"}\n                </button>\n                <ul className={s.pagesList}>\n                    {portionNumber > 1 &&\n\t\t\t\t\t<li className={`${currentPage === 1 ? s.selectedPage : \"\"} ${s.pagesItems}`}\n\t\t\t\t\t\tonClick={setFirstPage}>{1}...</li>}\n                    {pages\n                        .filter(p => p >= leftPortionPageNumber && p <= rightPortionNumber)\n                        .map(p => {\n                            return <li key={p}\n                                       className={`${currentPage === p ? s.selectedPage : \"\"} ${s.pagesItems}`}\n                                       onClick={() => {\n                                           onChangePage(p)\n                                       }}>{p}</li>\n                        })}\n                    {portionNumber < portionCount &&<span>...</span>}\n                    {portionNumber < portionCount && \n\t\t\t\t\t<li className={`${currentPage === lastPage ? s.selectedPage : s.lastPage} ${s.pagesItems}`}\n\t\t\t\t\t\tonClick={setLastPage}>{lastPage}</li>}\n                </ul>\n                <button className={`${s.btn} ${s.btnRight}`}\n                        onClick={setNextPage}\n                        disabled={currentPage === pages[pages.length - 1]}>{\">\"}</button>\n\n            </div>\n        </>\n    )\n}","import React from 'react';\nimport {useFormik} from 'formik';\nimport {useDispatch} from \"react-redux\";\nimport {setPageSizeAC} from \"../../features/Packs/Packs-reducer\";\n\n\nexport const Select = () => {\n    const dispatch = useDispatch();\n    const formik = useFormik({\n        initialValues: {\n            choosePageSize: \"\",\n        },\n        onSubmit: values => {\n            dispatch(setPageSizeAC(values.choosePageSize));\n        },\n    })\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <form onSubmit={formik.handleSubmit} onChange={formik.submitForm}>\n                <select\n                    name=\"choosePageSize\"\n                    value={formik.values.choosePageSize}\n                    onChange={formik.handleChange}\n                    style={{display: 'block'}}\n                >\n                    <option value={\"5\"} label=\"5\"/>\n                    <option value={\"10\"} label=\"10\"/>\n                    <option value={\"15\"} label=\"15\"/>\n                    <option value={\"20\"} label=\"20\"/>\n                </select>\n            </form>\n        </form>\n    );\n}","import React, {useEffect} from \"react\";\nimport {TablePacks} from \"../../components/Table/Table\";\nimport {PackType} from \"../../api/api\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport s from \"./Packs.module.scss\"\nimport {getPacksTC, setCurrentPageAC} from \"./Packs-reducer\";\nimport {FindForm} from \"../../components/FindForm/FindForm\";\nimport {Sort} from \"../../components/Sort/Sort\";\nimport {Paginator} from \"../../components/Paginator/Paginator\";\nimport {Select} from \"../../components/Select/Select\";\nimport {Redirect} from \"react-router-dom\";\n\nexport const Packs = () => {\n    const packName = useSelector<AppRootStateType, string>(state => state.packs.findPackName)\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.packs)\n    const min = useSelector<AppRootStateType, number>(state => state.packs.min)\n    const max = useSelector<AppRootStateType, number>(state => state.packs.max)\n    const update = useSelector<AppRootStateType, number>(state => state.packs.update)\n    const dispatch = useDispatch();\n    const totalItemsCount = useSelector<AppRootStateType, number>(state => state.packs.totalPacksCount)\n    const currentPage = useSelector<AppRootStateType, number>(state => state.packs.currentPage)\n    const pageSize = useSelector<AppRootStateType, string>(state => state.packs.pageSize)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const onChangeCurrentPage = (currentPage: number) => {\n        dispatch(setCurrentPageAC(currentPage))\n    }\n\n    useEffect(() => {\n        if (!isLoggedIn) return\n        dispatch(getPacksTC(packName + \"\", min, max, `${update}`, currentPage,\n            +pageSize));\n    }, [packName, currentPage, dispatch, pageSize, min, max, update])\n    if (!isLoggedIn) {\n\n        return <Redirect to={'/login'}/>\n    }\n    return (\n        <>\n            <h1>Packs Page</h1>\n            <FindForm/>\n            <Sort/>\n            <div>\n                <h2>PACKS</h2>\n                <TablePacks values={packs}/>\n            </div>\n            <div className={s.settings}>\n                <Paginator totalItemsCount={totalItemsCount}\n                           pageSize={pageSize} currentPage={currentPage}\n                           portionSize={7}\n                           onChangePage={onChangeCurrentPage}\n                />\n                Size:<Select/>\n            </div>\n\n        </>\n    );\n}\n//\n// =======\n// import styles from \"./Packs.module.css\"\n// import {TablePacks} from \"../../components/Table/Table\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import {AppRootStateType} from \"../../app/store\";\n// import {PackType} from \"../../api/api\";\n// import {getPacksTC} from \"./Packs-reducer\";\n//\n// export const Packs = () => {\n//     const dispatch = useDispatch()\n//     const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.packs)\n//     const currentPage = useSelector<AppRootStateType, number>(state => state.packs.currentPage)\n//     const pageSize = useSelector<AppRootStateType, number>(state => state.packs.pageSize)\n//\n//     useEffect(() => {\n//         dispatch(getPacksTC(currentPage, pageSize))\n//     }, [currentPage, pageSize])\n//\n//     return (\n//         <div>\n//             <h2>PACKS</h2>\n//             <TablePacks values={packs}/>\n//         </div>\n//     )\n// }","import React, {useEffect} from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport {Profile} from \"../features/Profile/Profile\";\nimport {Login} from \"../features/Login/Login\";\nimport {SignUp} from \"../features/SignUp/SignUp\";\nimport {Recovery} from \"../features/Recovery/Recovery\";\nimport {Initiate} from \"../features/Initiate/Initiate\";\nimport {Header} from \"../components/Header/Header\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {initializeAppTC} from \"./app-reducer\";\nimport {AppRootStateType} from \"./store\";\nimport {Preloader} from \"../components/Preloader/Preloader\";\nimport s from \"./App.module.scss\"\nimport {Packs} from \"../features/Packs/Packs\";\nfunction App(){\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    },[])\n\n    if (!isInitialized) {\n         return <Preloader/>\n    }\n\n    return (\n        <div className={s.App}>\n            <Header/>\n            <Switch>\n                <Route exact path={[\"/Fridayapp\", \"/\"]} render={() => <Profile/>}/>\n                <Route path={\"/packs\"} render={() => <Packs/>}/>\n                <Route path={\"/login\"} render={() => <Login/>}/>\n                <Route path={\"/signup\"} render={() => <SignUp/>}/>\n                <Route path={\"/recovery\"} render={() => <Recovery/>}/>\n                <Route path={\"/initiate/:token\"} render={() => <Initiate/>}/>\n                <Route path={\"/404\"} render={() => <h1>Error 404. Page not found.</h1>}/>\n                <Redirect from={\"*\"} to={\"/404\"}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {RegistrationParamsType} from \"../../api/api\";\n\n\nconst initialState = {\n    cards: [],\n    pageSize: 5,\n    totalCardsCount: 0,\n    currentPage: 1,\n    isFetching: false\n}\n\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n\n        default:\n            return state\n    }\n}\n\n//Action creators\nexport const setIsRegisteredAC = (isRegistered: boolean) => ({type: 'SET-IS-REGISTERED', isRegistered} as const)\n\n\n//Thunk creators\nexport const registrationTC = (data: RegistrationParamsType) => {\n    return (dispatch: any) => {\n\n    }\n}\n\n//types\ntype ActionsTypes =\n    | ReturnType<typeof setIsRegisteredAC>\n\n\ntype ThunksDispatch = ThunkAction<Promise<void>, AppRootStateType, unknown, ActionsTypes>\n\ntype InitialStateType = {};\n\n\n\n\n\n\n\n","import {combineReducers, createStore, applyMiddleware} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from \"./app-reducer\";\nimport {recoveryReducer} from \"../features/Recovery/recovery-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {signUpReducer} from \"../features/SignUp/signup-reducer\";\nimport {packsReducer} from \"../features/Packs/Packs-reducer\";\nimport {cardsReducer} from \"../features/Cards/Cards-reducer\";\n\nconst rootReducer = combineReducers({\n    app: appReducer,\n    login: authReducer,\n    signup: signUpReducer,\n    recovery: recoveryReducer,\n    packs: packsReducer,\n    cards: cardsReducer\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer> ;\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <HashRouter><React.StrictMode>\n        <Provider store={store}>\n            <App  />\n        </Provider>\n    </React.StrictMode></HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}